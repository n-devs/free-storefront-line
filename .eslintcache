[{"/Users/n.devs/Desktop/develop/line-login-react/src/reducers/rootReducer.js":"1","/Users/n.devs/Desktop/develop/line-login-react/src/views/SettingView/index.js":"2","/Users/n.devs/Desktop/develop/line-login-react/src/components/DialogChangNumberPhone/index.js":"3","/Users/n.devs/Desktop/develop/line-login-react/src/App.js":"4","/Users/n.devs/Desktop/develop/line-login-react/src/reducers/userReducer.js":"5","/Users/n.devs/Desktop/develop/line-login-react/src/views/NotFoundLIFFIDView/index.js":"6","/Users/n.devs/Desktop/develop/line-login-react/src/reducers/authReducer.js":"7","/Users/n.devs/Desktop/develop/line-login-react/src/views/LiffRedirectUriView/index.js":"8","/Users/n.devs/Desktop/develop/line-login-react/src/views/SetupView/index.js":"9","/Users/n.devs/Desktop/develop/line-login-react/src/index.js":"10","/Users/n.devs/Desktop/develop/line-login-react/src/reducers/todoReducer.js":"11","/Users/n.devs/Desktop/develop/line-login-react/src/components/Loading/index.js":"12","/Users/n.devs/Desktop/develop/line-login-react/src/views/AddressView/index.js":"13","/Users/n.devs/Desktop/develop/line-login-react/src/reducers/controlReducer.js":"14","/Users/n.devs/Desktop/develop/line-login-react/src/components/DialogAddAddress/index.js":"15","/Users/n.devs/Desktop/develop/line-login-react/src/reducers/addressReducer.js":"16","/Users/n.devs/Desktop/develop/line-login-react/src/components/DialogUpdateAddress/index.js":"17","/Users/n.devs/Desktop/develop/line-login-react/src/components/DialogDeleteAddress/index.js":"18","/Users/n.devs/Desktop/develop/line-login-react/src/views/AddProductView/index.js":"19","/Users/n.devs/Desktop/develop/line-login-react/src/reducers/productReducer.js":"20","/Users/n.devs/Desktop/develop/line-login-react/src/components/DialogAddProduct/index.js":"21","/Users/n.devs/Desktop/develop/line-login-react/src/components/DialogUpdateProduct/index.js":"22","/Users/n.devs/Desktop/develop/line-login-react/src/components/DialogDeleteProduct/index.js":"23","/Users/n.devs/Desktop/develop/line-login-react/src/views/ProductView/index.js":"24","/Users/n.devs/Desktop/develop/line-login-react/src/reducers/orderReducer.js":"25","/Users/n.devs/Desktop/develop/line-login-react/src/components/DialogListOrder/index.js":"26","/Users/n.devs/Desktop/develop/line-login-react/src/components/DialogSelectAddress/index.js":"27","/Users/n.devs/Desktop/develop/line-login-react/src/components/DialogBuyProduct/index.js":"28","/Users/n.devs/Desktop/develop/line-login-react/src/firebase.config.js":"29"},{"size":629,"mtime":1612039901600,"results":"30","hashOfConfig":"31"},{"size":6819,"mtime":1612002000010,"results":"32","hashOfConfig":"31"},{"size":3217,"mtime":1611960826557,"results":"33","hashOfConfig":"31"},{"size":4081,"mtime":1612055741709,"results":"34","hashOfConfig":"31"},{"size":899,"mtime":1612051333248,"results":"35","hashOfConfig":"31"},{"size":174,"mtime":1611947957921,"results":"36","hashOfConfig":"31"},{"size":692,"mtime":1611991693677,"results":"37","hashOfConfig":"31"},{"size":3580,"mtime":1612055980153,"results":"38","hashOfConfig":"31"},{"size":8931,"mtime":1612055766398,"results":"39","hashOfConfig":"31"},{"size":655,"mtime":1611940171038,"results":"40","hashOfConfig":"31"},{"size":767,"mtime":1611940063177,"results":"41","hashOfConfig":"31"},{"size":338,"mtime":1611936984428,"results":"42","hashOfConfig":"31"},{"size":5656,"mtime":1612056181487,"results":"43","hashOfConfig":"31"},{"size":2030,"mtime":1612046930661,"results":"44","hashOfConfig":"31"},{"size":7863,"mtime":1612056409645,"results":"45","hashOfConfig":"31"},{"size":1755,"mtime":1612030586329,"results":"46","hashOfConfig":"31"},{"size":9439,"mtime":1612055906504,"results":"47","hashOfConfig":"31"},{"size":3545,"mtime":1612036405840,"results":"48","hashOfConfig":"31"},{"size":5914,"mtime":1612055946165,"results":"49","hashOfConfig":"31"},{"size":2190,"mtime":1612034666772,"results":"50","hashOfConfig":"31"},{"size":10304,"mtime":1612056380090,"results":"51","hashOfConfig":"31"},{"size":11871,"mtime":1612055932519,"results":"52","hashOfConfig":"31"},{"size":4124,"mtime":1612036761409,"results":"53","hashOfConfig":"31"},{"size":6620,"mtime":1612056324490,"results":"54","hashOfConfig":"31"},{"size":750,"mtime":1612045035045,"results":"55","hashOfConfig":"31"},{"size":4794,"mtime":1612055875020,"results":"56","hashOfConfig":"31"},{"size":5807,"mtime":1612055894600,"results":"57","hashOfConfig":"31"},{"size":7187,"mtime":1612055846129,"results":"58","hashOfConfig":"31"},{"size":629,"mtime":1612056242353,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},"zqtubk",{"filePath":"63","messages":"64","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"66"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"62"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"62"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"91"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"62"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"109"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"116","messages":"117","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"124","messages":"125","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"62"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/n.devs/Desktop/develop/line-login-react/src/reducers/rootReducer.js",[],["128","129"],"/Users/n.devs/Desktop/develop/line-login-react/src/views/SettingView/index.js",["130","131"],"import React from 'react';\nimport {\n    makeStyles\n} from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fireStore } from '../../firebase.config';\nimport queryString from \"query-string\";\nimport NumberPhoneInput from '../../components/NumberPhoneInput';\nimport DialogChangNumberPhone from '../../components/DialogChangNumberPhone';\n// import liff from '@line/liff';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Slide from '@material-ui/core/Slide';\nimport MuiAlert from '@material-ui/lab/Alert';\n\nconst useStyles = makeStyles((theme) => ({\n    avatars: {\n        width: theme.spacing(10),\n        height: theme.spacing(10),\n    },\n    appBar: {\n        top: 'auto',\n        bottom: 0,\n        backgroundColor: 'white',\n        padding: 15,\n    },\n    layout: {\n        padding: \"10px 0px\"\n    },\n    app: {\n        height: 450\n    }\n}));\n\nfunction TransitionDown(props) {\n    return <Slide {...props} direction=\"down\" />;\n}\n\nfunction Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nfunction SettingView() {\n    const dispatch = useDispatch();\n    const classes = useStyles();\n    const parsed = queryString.parse(window.location.search);\n    const user = useSelector(state => state.user);\n    const control = useSelector(state => state.control);\n\n    function openDialog() {\n        dispatch({ type: \"CONTROL_OPEN_DIALOG_CHANG_NUMBER_PHONE\", payload: !control.openDialogChangNumber })\n    }\n    const appRef = fireStore.collection(\"line_apps\");\n\n    async function Update() {\n        await appRef.doc(parsed.liff_id).collection(\"users\").doc(user.userId).update({\n            userId: user.userId,\n            displayName: user.displayName,\n            pictureUrl: user.pictureUrl,\n            numberPhone: user.numberPhone\n        }).then(function () {\n            dispatch({ type: \"AUTH_STATUS\", payload: true })\n            dispatch({ type: \"CONTROL_OPEN_SNACKBARK_UPDATE_NUMBER_PHONE_SECCUSS\", payload: !control.openSnackbarUpdateNumberSeccuss })\n            // liff.init({ liffId: `${parsed.liff_id}` }).then(async () => {\n            //     await liff.init().closeWindow()\n\n            // }).catch(err => { throw err });\n\n\n        });\n\n    }\n\n    function handleClose() {\n        dispatch({ type: \"CONTROL_OPEN_SNACKBARK_UPDATE_NUMBER_PHONE_SECCUSS\", payload: !control.openSnackbarUpdateNumberSeccuss })\n    }\n\n    React.useEffect(() => {\n        dispatch({ type: \"AUTH_FIST_PATH\", payload: window.location.pathname })\n        dispatch({ type: \"AUTH_LIFF_ID\", payload: parsed.liff_id })\n    }, [window.location.pathname])\n    return (\n        <div>\n            <Grid\n                container\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n                className={classes.app}\n            >\n                <Grid item xs={12}>\n                    <Grid\n                        container\n                        direction=\"column\"\n                        justify=\"center\"\n                        alignItems=\"center\"\n                    >\n                        <Grid item xs={12}>\n                            <Grid\n                                container\n                                direction=\"row\"\n                                justify=\"center\"\n                                alignItems=\"center\"\n                                className={classes.layout}\n                                style={{\n                                    paddingTop: 20\n                                }}\n                            >\n                                <Avatar alt={user.displayName} src={user.pictureUrl} className={classes.avatars} />\n                            </Grid>\n                            <Grid\n                                container\n                                direction=\"row\"\n                                justify=\"center\"\n                                alignItems=\"center\"\n                                className={classes.layout}\n                            >\n                                <Typography variant=\"h6\" component=\"h6\">\n                                    {user.displayName}\n                                </Typography>\n                            </Grid>\n                            <Grid\n                                container\n                                direction=\"row\"\n                                justify=\"center\"\n                                alignItems=\"center\"\n                                className={classes.layout}\n                                style={{\n                                    paddingTop: 20\n                                }}\n                            >\n                                <label htmlFor=\"phone\">{\"หมายเลขโทรศัพท์ที่ลงทะเบียน:\"}</label>\n                                <NumberPhoneInput type=\"tel\" id=\"phone\" name=\"phone\" pattern=\"[0-9]{3} [0-9]{2} [0-9]{3} [0-9]{4}\" placeholder=\"+66 80 123 1234\" value={user.numberPhone} onClick={openDialog}></NumberPhoneInput>\n                            </Grid>\n                        </Grid>\n                        <Grid item xs={12}></Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n            <AppBar position=\"fixed\" color=\"primary\" className={classes.appBar}>\n                <Button variant=\"contained\" style={{ fontSize: '1em', backgroundColor: \"#00b900\", color: \"#fff\", fontWeight: \"bold\" }} onClick={Update}>\n                    {\"เปลี่ยนหมายเลขโทรศัพท์\"}\n                </Button>\n            </AppBar>\n            <DialogChangNumberPhone></DialogChangNumberPhone>\n            <Snackbar\n                anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n                open={control.openSnackbarUpdateNumberSeccuss}\n                onClose={handleClose}\n                style={{ backgroundColor: 'white' }}\n                ContentProps={{ style: { backgroundColor: 'white',\n                boxShadow: '0px 3px 5px -1px rgb(0 0 0 / 0%), 0px 6px 10px 0px rgb(0 0 0 / 0%), 0px 1px 18px 0px rgb(0 0 0 / 0%)' } }}\n                TransitionComponent={TransitionDown}\n                autoHideDuration={6000}\n                message={<Alert onClose={handleClose} severity=\"success\">\n                    {`บันทึกหมายเลขโทรศัพท์ ${user.numberPhone}`}\n                </Alert>}\n                key={\"top\" + \"center\"}\n            >\n\n            </Snackbar>\n        </div>\n    )\n};\n\nexport default SettingView;",["132","133"],"/Users/n.devs/Desktop/develop/line-login-react/src/components/DialogChangNumberPhone/index.js",[],"/Users/n.devs/Desktop/develop/line-login-react/src/App.js",["134"],"import React from \"react\";\nimport \"./App.css\";\n// import liff from \"@line/liff\";\nimport {\n  makeStyles\n} from \"@material-ui/core/styles\";\nimport Loading from \"./components/Loading\"\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  TransitionGroup,\n  CSSTransition\n} from \"react-transition-group\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\n// import { fireStore } from \"./firebase.config\"\nimport queryString from \"query-string\";\nimport NotFoundLIFFIDView from \"./views/NotFoundLIFFIDView\"\nimport SetupView from \"./views/SetupView\"\nimport SettingView from \"./views/SettingView\"\nimport LiffRedirectUriView from \"./views/LiffRedirectUriView\"\nimport AddressView from \"./views/AddressView\"\nimport AddProductView from \"./views/AddProductView\"\nimport ProductView from \"./views/ProductView\"\n\nconst useStyles = makeStyles((theme) => ({\n  avatars: {\n    width: theme.spacing(10),\n    height: theme.spacing(10),\n  },\n  appBar: {\n    top: \"auto\",\n    bottom: 0,\n    backgroundColor: \"white\",\n    padding: 15,\n  },\n  layout: {\n    padding: \"10px 0px\"\n  },\n  app: {\n    height: 450\n  }\n}));\n\nfunction RunView(props) {\n  const auth = useSelector(state => state.auth);\n  const parsed = queryString.parse(window.location.search);\n  console.log(auth.liff_id);\n  return (\n    <React.Fragment>\n      {auth.liff_id ? (<React.Fragment>\n        {auth.status ? (\n          <React.Fragment>\n            {props.children}\n          </React.Fragment>\n        ) : (\n            <React.Fragment>\n              <Redirect to={`/setup?liff_id=${parsed.liff_id}&pathname=${window.location.pathname}`} />\n            </React.Fragment>\n          )}\n      </React.Fragment>) : (<NotFoundLIFFIDView></NotFoundLIFFIDView>)}\n\n    </React.Fragment>\n  )\n}\n\nfunction App() {\n  const [loading, setLoading] = React.useState(true);\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const parsed = queryString.parse(window.location.search);\n  const auth = useSelector(state => state.auth);\n\n  React.useEffect(() => {\n    if (parsed.liff_id) {\n      sessionStorage.setItem(\"liff_id\", parsed.liff_id);\n      sessionStorage.setItem(\"fist_path\", window.location.pathname);\n      dispatch({ type: \"AUTH_LIFF_ID\", payload: parsed.liff_id })\n      dispatch({ type: \"AUTH_STATUS\", payload: auth.status })\n      setLoading(false)\n    } else {\n      setLoading(false)\n      dispatch({ type: \"AUTH_LIFF_ID\", payload: parsed.liff_id })\n    }\n  }, [])\n\n\n  return (\n    <div className={classes.app}>\n      {loading ? (\n        <Loading></Loading>\n      ) : (<React.Fragment>\n        <Router>\n          <TransitionGroup>\n            <CSSTransition\n              key={window.location.key}\n              classNames=\"fade\"\n              timeout={300}\n            >\n              <Switch>\n                <Route exact path={`/`}>\n                  {sessionStorage.getItem(\"liff_id\") ? (<LiffRedirectUriView></LiffRedirectUriView>) : (<NotFoundLIFFIDView></NotFoundLIFFIDView>)}\n\n                </Route>\n                <Route path={`/setup`}>\n                  {sessionStorage.getItem(\"liff_id\") ? (<SetupView></SetupView>) : (<NotFoundLIFFIDView></NotFoundLIFFIDView>)}\n                </Route>\n\n                <Route path={`/setting`}>\n                  <RunView>\n                    <SettingView></SettingView>\n                  </RunView>\n                </Route>\n                <Route path={`/address`}>\n                  <RunView>\n                    <AddressView></AddressView>\n                  </RunView>\n                </Route>\n                <Route path={`/add_product`}>\n                  <RunView>\n                    <AddProductView></AddProductView>\n                  </RunView>\n                </Route>\n                <Route path={`/products`}>\n                  <RunView>\n                    <ProductView></ProductView>\n                  </RunView>\n                </Route>\n              </Switch>\n            </CSSTransition>\n          </TransitionGroup>\n        </Router>\n      </React.Fragment>)}\n    </div>\n  );\n}\n\nexport default App;\n",["135","136"],"/Users/n.devs/Desktop/develop/line-login-react/src/reducers/userReducer.js",[],"/Users/n.devs/Desktop/develop/line-login-react/src/views/NotFoundLIFFIDView/index.js",[],"/Users/n.devs/Desktop/develop/line-login-react/src/reducers/authReducer.js",[],"/Users/n.devs/Desktop/develop/line-login-react/src/views/LiffRedirectUriView/index.js",["137","138"],"import React from 'react';\nimport queryString from \"query-string\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\"\nimport liff from \"@line/liff\";\nimport { fireStore } from \"../../firebase.config\"\n\nfunction LiffRedirectUriView() {\n    const [loading, setLoading] = React.useState(true);\n    const history = useHistory()\n    const auth = useSelector(state => state.auth);\n    const parsed = queryString.parse(window.location.search);\n    const dispatch = useDispatch();\n    console.log(parsed[\"liff.state\"]);\n    console.log(auth);\n    console.log(history);\n\n    console.log(dispatch);\n\n    React.useEffect(() => {\n        const appRef = fireStore.collection(\"line_apps\");\n        if (sessionStorage.getItem(\"liff_id\")) {\n            liff.init({ liffId: `${sessionStorage.getItem(\"liff_id\")}` }).then(async () => {\n\n                if (liff.isLoggedIn()) {\n                    const getProfile = await liff.getProfile();\n                    console.log(getProfile);\n\n                    const userId = await appRef.doc(sessionStorage.getItem(\"liff_id\")).collection(\"users\").doc(getProfile.userId).get();\n\n                    if (!userId.exists) {\n                        console.log(\"No such document!\");\n                        dispatch({ type: \"AUTH_STATUS\", payload: false })\n                        dispatch({ type: \"USER_DISPLAY_NAME\", payload: getProfile.displayName });\n                        dispatch({ type: \"USER_ID\", payload: getProfile.userId });\n                        dispatch({ type: \"USER_PICTURE_URL\", payload: getProfile.pictureUrl });\n                        await appRef.doc(sessionStorage.getItem(\"liff_id\")).collection(\"users\").doc(getProfile.userId).set({ ...getProfile })\n\n                    } else {\n                        console.log(\"Document data:\", userId.data());\n                        console.log(\"getProfile line:\", getProfile);\n                        if (userId.data().numberPhone) {\n                            dispatch({ type: \"AUTH_STATUS\", payload: true })\n                            dispatch({ type: \"USER_DISPLAY_NAME\", payload: userId.data().displayName });\n                            dispatch({ type: \"USER_ID\", payload: userId.data().userId });\n                            dispatch({ type: \"USER_PICTURE_URL\", payload: userId.data().pictureUrl });\n                            dispatch({ type: \"USER_NUMBER_PHONE\", payload: userId.data().numberPhone })\n                            setLoading(false)\n                        } else {\n                            dispatch({ type: \"AUTH_STATUS\", payload: false })\n                            dispatch({ type: \"USER_DISPLAY_NAME\", payload: userId.data().displayName });\n                            dispatch({ type: \"USER_ID\", payload: userId.data().userId });\n                            dispatch({ type: \"USER_PICTURE_URL\", payload: userId.data().pictureUrl });\n                            setLoading(false)\n                        }\n                    }\n                } else {\n                    dispatch({ type: \"AUTH_FIST_PATH\", payload: window.location.pathname })\n\n                    liff.login();\n                    console.log(\"a\");\n                }\n\n            }).catch(err => { throw err });\n        } else {\n            // setLoading(false)\n            console.log(\"b\");\n            dispatch({ type: \"AUTH_LIFF_ID\", payload: parsed.liff_id })\n        }\n    }, [])\n\n    return (<React.Fragment>\n        {/* <Redirect to={`${parsed[\"liff.state\"]}`} /> */}\n    </React.Fragment>)\n}\n\nexport default LiffRedirectUriView","/Users/n.devs/Desktop/develop/line-login-react/src/views/SetupView/index.js",["139"],"import React from 'react';\nimport {\n    makeStyles\n} from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fireStore } from '../../firebase.config';\nimport queryString from \"query-string\";\nimport NumberPhoneInput from '../../components/NumberPhoneInput';\nimport { useHistory } from 'react-router-dom';\nimport liff from \"@line/liff\";\nimport Loading from '../../components/Loading';\nimport { Redirect } from 'react-router-dom'\n\nconst useStyles = makeStyles((theme) => ({\n    avatars: {\n        width: theme.spacing(10),\n        height: theme.spacing(10),\n    },\n    appBar: {\n        top: 'auto',\n        bottom: 0,\n        backgroundColor: 'white',\n        padding: 15,\n    },\n    layout: {\n        padding: \"10px 0px\"\n    },\n    app: {\n        height: 450\n    }\n}));\n\n\nfunction SetupView() {\n    const [loading, setLoading] = React.useState(true);\n    const dispatch = useDispatch();\n    const classes = useStyles();\n    const parsed = queryString.parse(window.location.search);\n    const user = useSelector(state => state.user);\n    const auth = useSelector(state => state.auth);\n    // const [status,setStatus] = React.useState(false)\n    const history = useHistory();\n    const handleChange = (prop) => (event) => {\n        dispatch({ type: \"USER_NUMBER_PHONE\", payload: event.target.value })\n    };\n    const appRef = fireStore.collection(\"line_apps\");\n\n    async function Update() {\n        await appRef.doc(parsed.liff_id).collection(\"users\").doc(user.userId).update({\n            userId: user.userId,\n            displayName: user.displayName,\n            pictureUrl: user.pictureUrl,\n            numberPhone: user.numberPhone\n        }).then(function () {\n            dispatch({ type: \"AUTH_STATUS\", payload: true });\n            history.push(`${parsed.pathname}?liff_id=${parsed.liff_id}`)\n        });\n\n    }\n    React.useEffect(() => {\n        const appRef = fireStore.collection(\"line_apps\");\n        if (sessionStorage.getItem(\"liff_id\")) {\n            liff.init({ liffId: `${sessionStorage.getItem(\"liff_id\")}` }).then(async () => {\n\n                if (liff.isLoggedIn()) {\n                    const getProfile = await liff.getProfile();\n                    console.log(getProfile);\n\n                    const userId = await appRef.doc(sessionStorage.getItem(\"liff_id\")).collection(\"users\").doc(getProfile.userId).get();\n\n                    if (!userId.exists) {\n                        console.log(\"No such document!\");\n                        dispatch({ type: \"AUTH_STATUS\", payload: false })\n                        dispatch({ type: \"USER_DISPLAY_NAME\", payload: getProfile.displayName });\n                        dispatch({ type: \"USER_ID\", payload: getProfile.userId });\n                        dispatch({ type: \"USER_PICTURE_URL\", payload: getProfile.pictureUrl });\n                        await appRef.doc(sessionStorage.getItem(\"liff_id\")).collection(\"users\").doc(getProfile.userId).set({ ...getProfile })\n\n                    } else {\n                       \n                        console.log(\"getProfile line:\", getProfile);\n                        if (userId.data().numberPhone) {\n                            console.log(\"Document data:\", userId.data());\n                            dispatch({ type: \"AUTH_STATUS\", payload: true })\n                            dispatch({ type: \"USER_DISPLAY_NAME\", payload: userId.data().displayName });\n                            dispatch({ type: \"USER_ID\", payload: userId.data().userId });\n                            dispatch({ type: \"USER_PICTURE_URL\", payload: userId.data().pictureUrl });\n                            dispatch({ type: \"USER_NUMBER_PHONE\", payload: userId.data().numberPhone })\n                            setLoading(false)\n                            // setStatus(auth.status)\n                        } else {\n                            dispatch({ type: \"AUTH_STATUS\", payload: false })\n                            dispatch({ type: \"USER_DISPLAY_NAME\", payload: userId.data().displayName });\n                            dispatch({ type: \"USER_ID\", payload: userId.data().userId });\n                            dispatch({ type: \"USER_PICTURE_URL\", payload: userId.data().pictureUrl });\n                            setLoading(false)\n                        }\n                    }\n                } else {\n                    dispatch({ type: \"AUTH_FIST_PATH\", payload: window.location.pathname })\n\n                    liff.login({ redirectUri: `${window.location.href}` });\n                    console.log(\"a\");\n                }\n\n            }).catch(err => { throw err });\n        } else {\n            // setLoading(false)\n            console.log(\"b\");\n            dispatch({ type: \"AUTH_LIFF_ID\", payload: parsed.liff_id })\n        }\n    }, [])\n\n    return (\n        <div>\n            {loading ? (<React.Fragment>\n                <Loading></Loading>\n            </React.Fragment>) : (<React.Fragment>\n                {auth.status ? (<React.Fragment>\n                    <Redirect to={`${parsed.pathname}?liff_id=${parsed.liff_id}`}></Redirect>\n                </React.Fragment>) : (<React.Fragment>\n                    <Grid\n                        container\n                        direction=\"row\"\n                        justify=\"center\"\n                        alignItems=\"center\"\n                        className={classes.app}\n                    >\n                        <Grid item xs={12}>\n                            <Grid\n                                container\n                                direction=\"column\"\n                                justify=\"center\"\n                                alignItems=\"center\"\n                            >\n                                <Grid item xs={12}>\n                                    <Grid\n                                        container\n                                        direction=\"row\"\n                                        justify=\"center\"\n                                        alignItems=\"center\"\n                                        className={classes.layout}\n                                        style={{\n                                            paddingTop: 20\n                                        }}\n                                    >\n                                        <Avatar alt={user.displayName} src={user.pictureUrl} className={classes.avatars} />\n                                    </Grid>\n                                    <Grid\n                                        container\n                                        direction=\"row\"\n                                        justify=\"center\"\n                                        alignItems=\"center\"\n                                        className={classes.layout}\n                                    >\n                                        <Typography variant=\"h6\" component=\"h6\">\n                                            {user.displayName}\n                                        </Typography>\n                                    </Grid>\n                                    <Grid\n                                        container\n                                        direction=\"row\"\n                                        justify=\"center\"\n                                        alignItems=\"center\"\n                                        className={classes.layout}\n                                        style={{\n                                            paddingTop: 20\n                                        }}\n                                    >\n                                        <label htmlFor=\"phone\">{\"ลงทะเบียนหมายเลขโทรศัพท์:\"}</label>\n                                        <NumberPhoneInput type=\"tel\" id=\"phone\" name=\"phone\" pattern=\"[0-9]{3} [0-9]{2} [0-9]{3} [0-9]{4}\" placeholder=\"+66 80 123 1234\" onChange={handleChange()}></NumberPhoneInput>\n                                    </Grid>\n                                </Grid>\n                                <Grid item xs={12}></Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <AppBar position=\"fixed\" color=\"primary\" className={classes.appBar}>\n                        <Button variant=\"contained\" style={{ fontSize: '1em', backgroundColor: \"#00b900\", color: \"#fff\", fontWeight: \"bold\" }} onClick={Update}>\n                            {\"เพิ่มหมายเลขโทรศัพท์\"}\n                        </Button>\n                    </AppBar>\n                </React.Fragment>)}\n\n            </React.Fragment>)}\n\n        </div>\n    )\n};\n\nexport default SetupView;","/Users/n.devs/Desktop/develop/line-login-react/src/index.js",[],"/Users/n.devs/Desktop/develop/line-login-react/src/reducers/todoReducer.js",[],"/Users/n.devs/Desktop/develop/line-login-react/src/components/Loading/index.js",[],["140","141"],"/Users/n.devs/Desktop/develop/line-login-react/src/views/AddressView/index.js",["142"],"/Users/n.devs/Desktop/develop/line-login-react/src/reducers/controlReducer.js",[],"/Users/n.devs/Desktop/develop/line-login-react/src/components/DialogAddAddress/index.js",[],"/Users/n.devs/Desktop/develop/line-login-react/src/reducers/addressReducer.js",[],"/Users/n.devs/Desktop/develop/line-login-react/src/components/DialogUpdateAddress/index.js",[],"/Users/n.devs/Desktop/develop/line-login-react/src/components/DialogDeleteAddress/index.js",[],"/Users/n.devs/Desktop/develop/line-login-react/src/views/AddProductView/index.js",["143"],"import React from 'react';\nimport {\n    makeStyles\n} from '@material-ui/core/styles';\n// import Grid from '@material-ui/core/Grid';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fireStore } from '../../firebase.config';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText'\nimport Divider from '@material-ui/core/Divider';\nimport DialogAddProduct from '../../components/DialogAddProduct'\nimport DialogUpdateProduct from '../../components/DialogUpdateProduct'\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\n\nconst useStyles = makeStyles((theme) => ({\n    avatars: {\n        width: theme.spacing(10),\n        height: theme.spacing(10),\n    },\n    appBar: {\n        top: 'auto',\n        bottom: 0,\n        backgroundColor: 'white',\n        padding: 15,\n    },\n    layout: {\n        padding: \"10px 0px\"\n    },\n    app: {\n        height: 450\n    }\n}));\n\n// function TransitionDown(props) {\n//     return <Slide {...props} direction=\"down\" />;\n// }\n\n// function Alert(props) {\n//     return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n// }\n\nfunction AddProductView() {\n    const dispatch = useDispatch();\n    const classes = useStyles();\n    // const parsed = queryString.parse(window.location.search);\n    const user = useSelector(state => state.user);\n    const product = useSelector(state => state.product);\n    const control = useSelector(state => state.control);\n\n    function openDialogAddProduct() {\n        dispatch({ type: \"CONTROL_OPEN_DIALOG_ADD_PRODUCT\", payload: !control.openDialogAddProduct })\n    }\n    const appRef = fireStore.collection(\"line_apps\");\n\n    const openDialogUpdateProduct = (prop, number) => (event) => {\n        console.log(prop, number);\n        dispatch({ type: \"PRODUCT_UPDATE_NUMBER\", payload: number })\n        dispatch({ type: \"PRODUCT_UPDATE_ID\", payload: prop.id })\n        dispatch({ type: \"PRODUCT_UPDATE_NAME\", payload: prop.name })\n        dispatch({ type: \"PRODUCT_UPDATE_PRUDUCT_ID\", payload: prop.productId })\n        dispatch({ type: \"PRODUCT_UPDATE_PRICE\", payload: prop.price })\n        dispatch({ type: \"PRODUCT_UPDATE_IMAGE\", payload: prop.image })\n        dispatch({ type: \"CONTROL_OPEN_DIALOG_UPDATE_PRODUCT\", payload: !control.openDialogUpdateProduct })\n    }\n\n    React.useEffect(() => {\n        const data = [];\n        appRef.doc(sessionStorage.getItem(\"liff_id\")).collection(\"users\").doc(user.userId).collection(\"products\").get().then(snapshot => {\n            snapshot.docs.forEach(hospital => {\n                data.push(hospital.data())\n            });\n            dispatch({ type: \"PRODUCT_STORAGE\", payload: data })\n            dispatch({ type: \"AUTH_FIST_PATH\", payload: sessionStorage.getItem(\"fist_path\") })\n            dispatch({ type: \"AUTH_LIFF_ID\", payload: sessionStorage.getItem(\"liff_id\") })\n        })\n    }, [])\n\n    return (\n        <div style={{ paddingBottom: 70 }}>\n\n            <List\n                component=\"nav\"\n                aria-labelledby=\"nested-list-subheader\"\n                subheader={\n                    <ListSubheader component=\"div\" id=\"nested-list-subheader\" style={{ backgroundColor: \"white\" }}>\n                        {\"สินค้า\"}\n                    </ListSubheader>\n                }\n                className={classes.root}\n            >\n                {product.storage.map((data, key) => (\n                    <React.Fragment key={key}>\n\n                        <ListItem alignItems=\"flex-start\">\n                            <Divider></Divider>\n                            <ListItemAvatar>\n                                <Avatar variant=\"rounded\" alt=\"Remy Sharp\" src={data.image} style={{\n                                    width: 65,\n                                    height: 65\n                                }} />\n                            </ListItemAvatar>\n                            <ListItem button onClick={openDialogUpdateProduct(data, key)}>\n                                <ListItemText\n                                    primary={data.productId}\n                                    secondary={\n                                        <React.Fragment>\n                                            <Typography\n                                                component=\"span\"\n                                                variant=\"body2\"\n                                                className={classes.inline}\n                                                color=\"textPrimary\"\n                                            >\n                                                {data.name}\n                                            </Typography>\n                                            {\" — \" + data.price}\n                                        </React.Fragment>\n                                    }\n                                />\n                            </ListItem>\n                        </ListItem>\n                        <Divider variant=\"inset\" component=\"li\" />\n                    </React.Fragment>\n                ))}\n\n            </List>\n            <AppBar position=\"fixed\" color=\"primary\" className={classes.appBar}>\n                <Button variant=\"contained\" style={{ fontSize: '1em', backgroundColor: \"#00b900\", color: \"#fff\", fontWeight: \"bold\" }} onClick={openDialogAddProduct}>\n                    {\"เพิ่มสินค้า\"}\n                </Button>\n            </AppBar>\n            <DialogAddProduct></DialogAddProduct>\n            <DialogUpdateProduct></DialogUpdateProduct>\n        </div>\n    )\n};\n\nexport default AddProductView;","/Users/n.devs/Desktop/develop/line-login-react/src/reducers/productReducer.js",[],["144","145"],"/Users/n.devs/Desktop/develop/line-login-react/src/components/DialogAddProduct/index.js",[],"/Users/n.devs/Desktop/develop/line-login-react/src/components/DialogUpdateProduct/index.js",[],"/Users/n.devs/Desktop/develop/line-login-react/src/components/DialogDeleteProduct/index.js",[],"/Users/n.devs/Desktop/develop/line-login-react/src/views/ProductView/index.js",["146","147"],"/Users/n.devs/Desktop/develop/line-login-react/src/reducers/orderReducer.js",[],"/Users/n.devs/Desktop/develop/line-login-react/src/components/DialogListOrder/index.js",[],"/Users/n.devs/Desktop/develop/line-login-react/src/components/DialogSelectAddress/index.js",["148"],"/Users/n.devs/Desktop/develop/line-login-react/src/components/DialogBuyProduct/index.js",[],"/Users/n.devs/Desktop/develop/line-login-react/src/firebase.config.js",[],{"ruleId":"149","replacedBy":"150"},{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","severity":1,"message":"154","line":85,"column":8,"nodeType":"155","endLine":85,"endColumn":34,"suggestions":"156"},{"ruleId":"157","severity":1,"message":"158","line":162,"column":28,"nodeType":"159","messageId":"160","endLine":162,"endColumn":29},{"ruleId":"149","replacedBy":"161"},{"ruleId":"151","replacedBy":"162"},{"ruleId":"153","severity":1,"message":"163","line":88,"column":6,"nodeType":"155","endLine":88,"endColumn":8,"suggestions":"164"},{"ruleId":"149","replacedBy":"165"},{"ruleId":"151","replacedBy":"166"},{"ruleId":"167","severity":1,"message":"168","line":9,"column":12,"nodeType":"169","messageId":"170","endLine":9,"endColumn":19},{"ruleId":"153","severity":1,"message":"171","line":70,"column":8,"nodeType":"155","endLine":70,"endColumn":10,"suggestions":"172"},{"ruleId":"153","severity":1,"message":"171","line":117,"column":8,"nodeType":"155","endLine":117,"endColumn":10,"suggestions":"173"},{"ruleId":"149","replacedBy":"174"},{"ruleId":"151","replacedBy":"175"},{"ruleId":"153","severity":1,"message":"176","line":89,"column":8,"nodeType":"155","endLine":89,"endColumn":10,"suggestions":"177"},{"ruleId":"153","severity":1,"message":"178","line":82,"column":8,"nodeType":"155","endLine":82,"endColumn":10,"suggestions":"179"},{"ruleId":"149","replacedBy":"180"},{"ruleId":"151","replacedBy":"181"},{"ruleId":"167","severity":1,"message":"182","line":73,"column":12,"nodeType":"169","messageId":"170","endLine":73,"endColumn":20},{"ruleId":"153","severity":1,"message":"178","line":119,"column":8,"nodeType":"155","endLine":119,"endColumn":23,"suggestions":"183"},{"ruleId":"153","severity":1,"message":"178","line":81,"column":8,"nodeType":"155","endLine":81,"endColumn":10,"suggestions":"184"},"no-native-reassign",["185"],"no-negated-in-lhs",["186"],"react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'dispatch' and 'parsed.liff_id'. Either include them or remove the dependency array. Outer scope values like 'window.location.pathname' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["187"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat",["185"],["186"],"React Hook React.useEffect has missing dependencies: 'auth.status', 'dispatch', and 'parsed.liff_id'. Either include them or remove the dependency array.",["188"],["185"],["186"],"no-unused-vars","'loading' is assigned a value but never used.","Identifier","unusedVar","React Hook React.useEffect has missing dependencies: 'dispatch' and 'parsed.liff_id'. Either include them or remove the dependency array.",["189"],["190"],["185"],["186"],"React Hook React.useEffect has missing dependencies: 'dispatch' and 'user.userId'. Either include them or remove the dependency array.",["191"],"React Hook React.useEffect has missing dependencies: 'appRef', 'dispatch', and 'user.userId'. Either include them or remove the dependency array.",["192"],["185"],["186"],"'onLength' is assigned a value but never used.",["193"],["194"],"no-global-assign","no-unsafe-negation",{"desc":"195","fix":"196"},{"desc":"197","fix":"198"},{"desc":"195","fix":"199"},{"desc":"195","fix":"200"},{"desc":"201","fix":"202"},{"desc":"203","fix":"204"},{"desc":"205","fix":"206"},{"desc":"203","fix":"207"},"Update the dependencies array to be: [dispatch, parsed.liff_id]",{"range":"208","text":"209"},"Update the dependencies array to be: [auth.status, dispatch, parsed.liff_id]",{"range":"210","text":"211"},{"range":"212","text":"209"},{"range":"213","text":"209"},"Update the dependencies array to be: [dispatch, user.userId]",{"range":"214","text":"215"},"Update the dependencies array to be: [appRef, dispatch, user.userId]",{"range":"216","text":"217"},"Update the dependencies array to be: [appRef, dispatch, order.storage, user.userId]",{"range":"218","text":"219"},{"range":"220","text":"217"},[2832,2858],"[dispatch, parsed.liff_id]",[2473,2475],"[auth.status, dispatch, parsed.liff_id]",[3426,3428],[5012,5014],[3431,3433],"[dispatch, user.userId]",[3181,3183],"[appRef, dispatch, user.userId]",[4467,4482],"[appRef, dispatch, order.storage, user.userId]",[3124,3126]]