[{"/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/index.js":"1","/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/App.js":"2","/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/reportWebVitals.js":"3","/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/reducers/rootReducer.js":"4","/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/reducers/controlReducer.js":"5","/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/reducers/userReducer.js":"6","/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/reducers/authReducer.js":"7","/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/reducers/todoReducer.js":"8","/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/reducers/addressReducer.js":"9","/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/reducers/orderReducer.js":"10","/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/reducers/productReducer.js":"11","/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/views/NotFoundLIFFIDView/index.js":"12","/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/views/AddressView/index.js":"13","/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/views/LiffRedirectUriView/index.js":"14","/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/views/ProductView/index.js":"15","/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/views/AddProductView/index.js":"16","/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/views/SettingView/index.js":"17","/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/views/SetupView/index.js":"18","/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/components/Loading/index.js":"19","/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/firebase.config.js":"20","/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/components/DialogUpdateAddress/index.js":"21","/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/components/DialogAddAddress/index.js":"22","/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/components/DialogAddProduct/index.js":"23","/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/components/DialogListOrder/index.js":"24","/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/components/DialogUpdateProduct/index.js":"25","/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/components/DialogBuyProduct/index.js":"26","/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/components/DialogSelectAddress/index.js":"27","/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/components/NumberPhoneInput/index.js":"28","/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/components/DialogChangNumberPhone/index.js":"29","/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/components/DialogDeleteProduct/index.js":"30","/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/components/DialogDeleteAddress/index.js":"31"},{"size":655,"mtime":1612052032222,"results":"32","hashOfConfig":"33"},{"size":4078,"mtime":1612052032124,"results":"34","hashOfConfig":"33"},{"size":362,"mtime":1612052032275,"results":"35","hashOfConfig":"33"},{"size":629,"mtime":1612052032273,"results":"36","hashOfConfig":"33"},{"size":2030,"mtime":1612052032229,"results":"37","hashOfConfig":"33"},{"size":899,"mtime":1612052032275,"results":"38","hashOfConfig":"33"},{"size":692,"mtime":1612052032224,"results":"39","hashOfConfig":"33"},{"size":767,"mtime":1612052032274,"results":"40","hashOfConfig":"33"},{"size":1755,"mtime":1612052032224,"results":"41","hashOfConfig":"33"},{"size":750,"mtime":1612052032243,"results":"42","hashOfConfig":"33"},{"size":2190,"mtime":1612052032254,"results":"43","hashOfConfig":"33"},{"size":174,"mtime":1612052032297,"results":"44","hashOfConfig":"33"},{"size":5601,"mtime":1612052032284,"results":"45","hashOfConfig":"33"},{"size":3590,"mtime":1612052032296,"results":"46","hashOfConfig":"33"},{"size":6578,"mtime":1612052032313,"results":"47","hashOfConfig":"33"},{"size":5911,"mtime":1612052032283,"results":"48","hashOfConfig":"33"},{"size":6819,"mtime":1612052032316,"results":"49","hashOfConfig":"33"},{"size":8942,"mtime":1612052032331,"results":"50","hashOfConfig":"33"},{"size":338,"mtime":1612052032217,"results":"51","hashOfConfig":"33"},{"size":629,"mtime":1612052340634,"results":"52","hashOfConfig":"33"},{"size":9430,"mtime":1612052032208,"results":"53","hashOfConfig":"33"},{"size":7845,"mtime":1612052032127,"results":"54","hashOfConfig":"33"},{"size":10289,"mtime":1612052032138,"results":"55","hashOfConfig":"33"},{"size":4767,"mtime":1612052032205,"results":"56","hashOfConfig":"33"},{"size":11862,"mtime":1612052032213,"results":"57","hashOfConfig":"33"},{"size":7160,"mtime":1612052032146,"results":"58","hashOfConfig":"33"},{"size":5789,"mtime":1612052032207,"results":"59","hashOfConfig":"33"},{"size":1250,"mtime":1612052032220,"results":"60","hashOfConfig":"33"},{"size":3217,"mtime":1612052032172,"results":"61","hashOfConfig":"33"},{"size":4124,"mtime":1612052032196,"results":"62","hashOfConfig":"33"},{"size":3545,"mtime":1612052032187,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"1ihrx05",{"filePath":"67","messages":"68","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"66"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"66"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"66"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"66"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"66"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"66"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"66"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"114","usedDeprecatedRules":"66"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"66"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"66"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"66"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"66"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"66"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"66"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"66"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/index.js",[],["142","143"],"/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/App.js",["144","145"],"import React from \"react\";\nimport \"./App.css\";\nimport liff from \"@line/liff\";\nimport {\n  makeStyles\n} from \"@material-ui/core/styles\";\nimport Loading from \"./components/Loading\"\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  TransitionGroup,\n  CSSTransition\n} from \"react-transition-group\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\n// import { fireStore } from \"./firebase.config\"\nimport queryString from \"query-string\";\nimport NotFoundLIFFIDView from \"./views/NotFoundLIFFIDView\"\nimport SetupView from \"./views/SetupView\"\nimport SettingView from \"./views/SettingView\"\nimport LiffRedirectUriView from \"./views/LiffRedirectUriView\"\nimport AddressView from \"./views/AddressView\"\nimport AddProductView from \"./views/AddProductView\"\nimport ProductView from \"./views/ProductView\"\n\nconst useStyles = makeStyles((theme) => ({\n  avatars: {\n    width: theme.spacing(10),\n    height: theme.spacing(10),\n  },\n  appBar: {\n    top: \"auto\",\n    bottom: 0,\n    backgroundColor: \"white\",\n    padding: 15,\n  },\n  layout: {\n    padding: \"10px 0px\"\n  },\n  app: {\n    height: 450\n  }\n}));\n\nfunction RunView(props) {\n  const auth = useSelector(state => state.auth);\n  const parsed = queryString.parse(window.location.search);\n  console.log(auth.liff_id);\n  return (\n    <React.Fragment>\n      {auth.liff_id ? (<React.Fragment>\n        {auth.status ? (\n          <React.Fragment>\n            {props.children}\n          </React.Fragment>\n        ) : (\n            <React.Fragment>\n              <Redirect to={`/setup?liff_id=${parsed.liff_id}&pathname=${window.location.pathname}`} />\n            </React.Fragment>\n          )}\n      </React.Fragment>) : (<NotFoundLIFFIDView></NotFoundLIFFIDView>)}\n\n    </React.Fragment>\n  )\n}\n\nfunction App() {\n  const [loading, setLoading] = React.useState(true);\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const parsed = queryString.parse(window.location.search);\n  const auth = useSelector(state => state.auth);\n\n  React.useEffect(() => {\n    if (parsed.liff_id) {\n      sessionStorage.setItem(\"liff_id\", parsed.liff_id);\n      sessionStorage.setItem(\"fist_path\", window.location.pathname);\n      dispatch({ type: \"AUTH_LIFF_ID\", payload: parsed.liff_id })\n      dispatch({ type: \"AUTH_STATUS\", payload: auth.status })\n      setLoading(false)\n    } else {\n      setLoading(false)\n      dispatch({ type: \"AUTH_LIFF_ID\", payload: parsed.liff_id })\n    }\n  }, [])\n\n\n  return (\n    <div className={classes.app}>\n      {loading ? (\n        <Loading></Loading>\n      ) : (<React.Fragment>\n        <Router>\n          <TransitionGroup>\n            <CSSTransition\n              key={window.location.key}\n              classNames=\"fade\"\n              timeout={300}\n            >\n              <Switch>\n                <Route exact path={`/`}>\n                  {sessionStorage.getItem(\"liff_id\") ? (<LiffRedirectUriView></LiffRedirectUriView>) : (<NotFoundLIFFIDView></NotFoundLIFFIDView>)}\n\n                </Route>\n                <Route path={`/setup`}>\n                  {sessionStorage.getItem(\"liff_id\") ? (<SetupView></SetupView>) : (<NotFoundLIFFIDView></NotFoundLIFFIDView>)}\n                </Route>\n\n                <Route path={`/setting`}>\n                  <RunView>\n                    <SettingView></SettingView>\n                  </RunView>\n                </Route>\n                <Route path={`/address`}>\n                  <RunView>\n                    <AddressView></AddressView>\n                  </RunView>\n                </Route>\n                <Route path={`/add_product`}>\n                  <RunView>\n                    <AddProductView></AddProductView>\n                  </RunView>\n                </Route>\n                <Route path={`/products`}>\n                  <RunView>\n                    <ProductView></ProductView>\n                  </RunView>\n                </Route>\n              </Switch>\n            </CSSTransition>\n          </TransitionGroup>\n        </Router>\n      </React.Fragment>)}\n    </div>\n  );\n}\n\nexport default App;\n","/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/reportWebVitals.js",[],"/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/reducers/rootReducer.js",[],"/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/reducers/controlReducer.js",[],"/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/reducers/userReducer.js",[],"/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/reducers/authReducer.js",[],"/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/reducers/todoReducer.js",[],"/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/reducers/addressReducer.js",[],"/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/reducers/orderReducer.js",[],"/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/reducers/productReducer.js",[],"/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/views/NotFoundLIFFIDView/index.js",[],"/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/views/AddressView/index.js",["146","147","148","149","150","151","152","153"],"import React from 'react';\nimport {\n    makeStyles\n} from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fireStore } from '../../firebase.config';\nimport queryString from \"query-string\";\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Slide from '@material-ui/core/Slide';\nimport MuiAlert from '@material-ui/lab/Alert';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText'\nimport Divider from '@material-ui/core/Divider';\nimport DialogAddAddress from '../../components/DialogAddAddress'\nimport DialogUpdateAddress from '../../components/DialogUpdateAddress'\n\nconst useStyles = makeStyles((theme) => ({\n    avatars: {\n        width: theme.spacing(10),\n        height: theme.spacing(10),\n    },\n    appBar: {\n        top: 'auto',\n        bottom: 0,\n        backgroundColor: 'white',\n        padding: 15,\n    },\n    layout: {\n        padding: \"10px 0px\"\n    },\n    app: {\n        height: 450\n    }\n}));\n\nfunction TransitionDown(props) {\n    return <Slide {...props} direction=\"down\" />;\n}\n\nfunction Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nfunction AddressView() {\n    const dispatch = useDispatch();\n    const classes = useStyles();\n    const parsed = queryString.parse(window.location.search);\n    const user = useSelector(state => state.user);\n    const address = useSelector(state => state.address);\n    const control = useSelector(state => state.control);\n\n    function openDialogAddAddress() {\n        dispatch({ type: \"CONTROL_OPEN_DIALOG_ADD_ADDRESS\", payload: !control.openDialogAddAddress })\n    }\n    const appRef = fireStore.collection(\"line_apps\");\n\n    const openDialogUpdateAddress = (prop, number) => (event) => {\n        console.log(prop,number);\n        dispatch({ type: \"ADDRESS_UPDATE_NUMBER\", payload: number })\n        dispatch({ type: \"ADDRESS_UPDATE_ID\", payload: prop.id })\n        dispatch({ type: \"ADDRESS_UPDATE_NAME\", payload: prop.name })\n        dispatch({ type: \"ADDRESS_UPDATE_NUMBER_PHONE\", payload: prop.numberPhone })\n        dispatch({ type: \"ADDRESS_UPDATE_ADDRESS\", payload: prop.address })\n        dispatch({ type: \"CONTROL_OPEN_DIALOG_UPDATE_ADDRESS\", payload: !control.openDialogUpdateAddress })\n    }\n\n    function handleClose() {\n        dispatch({ type: \"CONTROL_OPEN_SNACKBARK_UPDATE_NUMBER_PHONE_SECCUSS\", payload: !control.openSnackbarUpdateNumberSeccuss })\n    }\n\n    React.useEffect(() => {\n        const data = [];\n        appRef.doc(sessionStorage.getItem(\"liff_id\")).collection(\"users\").doc(user.userId).collection(\"address\").get().then(snapshot => {\n            snapshot.docs.forEach(hospital => {\n                data.push(hospital.data())\n            });\n            dispatch({ type: \"ADDRESS_STORAGE\", payload: data })\n            dispatch({ type: \"AUTH_FIST_PATH\", payload: sessionStorage.getItem(\"fist_path\") })\n            dispatch({ type: \"AUTH_LIFF_ID\", payload: sessionStorage.getItem(\"liff_id\") })\n        })\n    }, [])\n\n    return (\n        <div style={{ paddingBottom: 70 }}>\n\n            <List\n                component=\"nav\"\n                aria-labelledby=\"nested-list-subheader\"\n                subheader={\n                    <ListSubheader component=\"div\" id=\"nested-list-subheader\" style={{ backgroundColor: \"white\" }}>\n                        {\"ที่อยู่จัดส่ง\"}\n                    </ListSubheader>\n                }\n                className={classes.root}\n            >\n                {address.storage.map((data, key) => (\n                    <React.Fragment key={key}>\n                        <Divider></Divider>\n                        <ListItem button onClick={openDialogUpdateAddress(data, key)}>\n                            <ListItemText\n                                primary={data.name}\n                                secondary={\n                                    <React.Fragment>\n                                        <Typography\n                                            component=\"span\"\n                                            variant=\"body2\"\n                                            className={classes.inline}\n                                            color=\"textPrimary\"\n                                        >\n                                            {data.numberPhone}\n                                        </Typography>\n                                        {\" — \" + data.address}\n                                    </React.Fragment>\n                                }\n                            />\n                        </ListItem>\n                    </React.Fragment>\n                ))}\n\n            </List>\n            <AppBar position=\"fixed\" color=\"primary\" className={classes.appBar}>\n                <Button variant=\"contained\" style={{ fontSize: '1em', backgroundColor: \"#00b900\", color: \"#fff\", fontWeight: \"bold\" }} onClick={openDialogAddAddress}>\n                    {\"เพิ่มที่อยู่จัดส่ง\"}\n                </Button>\n            </AppBar>\n            <DialogAddAddress></DialogAddAddress>\n            <DialogUpdateAddress></DialogUpdateAddress>\n           \n        </div>\n    )\n};\n\nexport default AddressView;","/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/views/LiffRedirectUriView/index.js",["154","155","156"],"import React from 'react';\nimport queryString from \"query-string\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory, Redirect } from \"react-router-dom\"\nimport liff from \"@line/liff\";\nimport { fireStore } from \"../../firebase.config\"\n\nfunction LiffRedirectUriView() {\n    const [loading, setLoading] = React.useState(true);\n    const history = useHistory()\n    const auth = useSelector(state => state.auth);\n    const parsed = queryString.parse(window.location.search);\n    const dispatch = useDispatch();\n    console.log(parsed[\"liff.state\"]);\n    console.log(auth);\n    console.log(history);\n\n    console.log(dispatch);\n\n    React.useEffect(() => {\n        const appRef = fireStore.collection(\"line_apps\");\n        if (sessionStorage.getItem(\"liff_id\")) {\n            liff.init({ liffId: `${sessionStorage.getItem(\"liff_id\")}` }).then(async () => {\n\n                if (liff.isLoggedIn()) {\n                    const getProfile = await liff.getProfile();\n                    console.log(getProfile);\n\n                    const userId = await appRef.doc(sessionStorage.getItem(\"liff_id\")).collection(\"users\").doc(getProfile.userId).get();\n\n                    if (!userId.exists) {\n                        console.log(\"No such document!\");\n                        dispatch({ type: \"AUTH_STATUS\", payload: false })\n                        dispatch({ type: \"USER_DISPLAY_NAME\", payload: getProfile.displayName });\n                        dispatch({ type: \"USER_ID\", payload: getProfile.userId });\n                        dispatch({ type: \"USER_PICTURE_URL\", payload: getProfile.pictureUrl });\n                        await appRef.doc(sessionStorage.getItem(\"liff_id\")).collection(\"users\").doc(getProfile.userId).set({ ...getProfile })\n\n                    } else {\n                        console.log(\"Document data:\", userId.data());\n                        console.log(\"getProfile line:\", getProfile);\n                        if (userId.data().numberPhone) {\n                            dispatch({ type: \"AUTH_STATUS\", payload: true })\n                            dispatch({ type: \"USER_DISPLAY_NAME\", payload: userId.data().displayName });\n                            dispatch({ type: \"USER_ID\", payload: userId.data().userId });\n                            dispatch({ type: \"USER_PICTURE_URL\", payload: userId.data().pictureUrl });\n                            dispatch({ type: \"USER_NUMBER_PHONE\", payload: userId.data().numberPhone })\n                            setLoading(false)\n                        } else {\n                            dispatch({ type: \"AUTH_STATUS\", payload: false })\n                            dispatch({ type: \"USER_DISPLAY_NAME\", payload: userId.data().displayName });\n                            dispatch({ type: \"USER_ID\", payload: userId.data().userId });\n                            dispatch({ type: \"USER_PICTURE_URL\", payload: userId.data().pictureUrl });\n                            setLoading(false)\n                        }\n                    }\n                } else {\n                    dispatch({ type: \"AUTH_FIST_PATH\", payload: window.location.pathname })\n\n                    liff.login();\n                    console.log(\"a\");\n                }\n\n            }).catch(err => { throw err });\n        } else {\n            // setLoading(false)\n            console.log(\"b\");\n            dispatch({ type: \"AUTH_LIFF_ID\", payload: parsed.liff_id })\n        }\n    }, [])\n\n    return (<React.Fragment>\n        {/* <Redirect to={`${parsed[\"liff.state\"]}`} /> */}\n    </React.Fragment>)\n}\n\nexport default LiffRedirectUriView","/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/views/ProductView/index.js",["157","158","159","160","161","162","163"],"import React from 'react';\nimport {\n    makeStyles\n} from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fireStore } from '../../firebase.config';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport DialogAddProduct from '../../components/DialogAddProduct'\nimport DialogUpdateProduct from '../../components/DialogUpdateProduct'\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\nimport ListItem from '@material-ui/core/ListItem';\nimport { ButtonBase } from '@material-ui/core';\nimport Badge from '@material-ui/core/Badge';\nimport { withStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\nimport DialogListOrder from '../../components/DialogListOrder'\nimport DialogSelectAddress from '../../components/DialogSelectAddress'\nimport DialogBuyProduct from '../../components/DialogBuyProduct'\n\nconst StyledBadge = withStyles((theme) => ({\n    badge: {\n        right: -3,\n        top: 13,\n        border: `2px solid ${theme.palette.background.paper}`,\n        padding: '0 4px',\n    },\n}))(Badge);\n\n\nconst useStyles = makeStyles((theme) => ({\n    avatars: {\n        width: theme.spacing(10),\n        height: theme.spacing(10),\n    },\n    appBar: {\n        top: 'auto',\n        bottom: 0,\n        backgroundColor: 'white',\n        padding: 15,\n    },\n    layout: {\n        padding: \"10px 0px\"\n    },\n    app: {\n        height: 450\n    },\n    gridList: {\n        width: '100%',\n        height: '100%',\n    },\n    icon: {\n        color: 'rgba(255, 255, 255, 0.54)',\n    },\n}));\n\n// function TransitionDown(props) {\n//     return <Slide {...props} direction=\"down\" />;\n// }\n\n// function Alert(props) {\n//     return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n// }\n\nfunction ProductView() {\n    const dispatch = useDispatch();\n    const classes = useStyles();\n    const [onLength, setLength] = React.useState(0)\n    // const parsed = queryString.parse(window.location.search);\n    const user = useSelector(state => state.user);\n    const product = useSelector(state => state.product);\n    const control = useSelector(state => state.control);\n    const order = useSelector(state => state.order);\n\n    function openDialogSelectAddress() {\n        dispatch({ type: \"CONTROL_OPEN_DIALOG_SELECT_ADDRESS\", payload: !control.openDialogSelectAddress })\n    }\n    const appRef = fireStore.collection(\"line_apps\");\n\n    const openDialogUpdateProduct = (prop, number) => (event) => {\n        console.log(prop, number);\n        dispatch({ type: \"PRODUCT_UPDATE_NUMBER\", payload: number })\n        dispatch({ type: \"PRODUCT_UPDATE_ID\", payload: prop.id })\n        dispatch({ type: \"PRODUCT_UPDATE_NAME\", payload: prop.name })\n        dispatch({ type: \"PRODUCT_UPDATE_PRUDUCT_ID\", payload: prop.productId })\n        dispatch({ type: \"PRODUCT_UPDATE_PRICE\", payload: prop.price })\n        dispatch({ type: \"PRODUCT_UPDATE_IMAGE\", payload: prop.image })\n        dispatch({ type: \"CONTROL_OPEN_DIALOG_UPDATE_PRODUCT\", payload: !control.openDialogUpdateProduct })\n    }\n\n    const getOrder = (prop, key) => (event) => {\n        order.storage.push(prop)\n        dispatch({ type: \"ORDER_STORAGE\", payload: order.storage })\n        dispatch({ type: \"ORDER_LENGTH\", payload: order.storage.length })\n        setLength(order.storage.length)\n    }\n\n    const openDialogListOrder = () => {\n        dispatch({ type: \"CONTROL_OPEN_DIALOG_LIST_ORDER\", payload: !control.openDialogListOrder })\n    };\n\n\n    React.useEffect(() => {\n        const data = [];\n        appRef.doc(sessionStorage.getItem(\"liff_id\")).collection(\"users\").doc(user.userId).collection(\"products\").get().then(snapshot => {\n            snapshot.docs.forEach(hospital => {\n                data.push(hospital.data())\n            });\n            dispatch({ type: \"PRODUCT_STORAGE\", payload: data })\n            dispatch({ type: \"AUTH_FIST_PATH\", payload: sessionStorage.getItem(\"fist_path\") })\n            dispatch({ type: \"AUTH_LIFF_ID\", payload: sessionStorage.getItem(\"liff_id\") })\n        })\n        setLength(order.storage.length)\n    }, [order.storage])\n\n    return (\n        <div style={{ paddingBottom: 70 }}>\n\n            <GridList className={classes.gridList}>\n                <GridListTile key=\"Subheader\" cols={2} style={{ height: 'auto' }}>\n                    <ListSubheader component=\"div\">{\"สินค้า\"} <IconButton style={{ float: 'right' }} aria-label=\"cart\" onClick={openDialogListOrder}>\n                        <StyledBadge badgeContent={order.length} color=\"secondary\" >\n                            <ShoppingCartIcon />\n                        </StyledBadge>\n                    </IconButton></ListSubheader>\n\n                </GridListTile>\n                {product.storage.map((data, key) => (\n\n                    <GridListTile key={key} component=\"a\" onClick={getOrder(data, key)}>\n                        {/* <div style={{\n                            textAlign: 'end',\n                            color: '#35b900',\n                        }}>\n                            <Typography variant=\"h6\">{0}</Typography>\n                        </div> */}\n\n                        <img src={data.image} alt={data.name} />\n\n                        <GridListTileBar\n                            title={data.name}\n                            subtitle={<span>id: {data.productId}</span>}\n                            actionIcon={\n                                <Typography variant=\"h6\" style={{ color: 'white' }}>{`${data.price} `}<span style={{ fontSize: 15 }}>บาท</span></Typography>\n                            }\n                        />\n                    </GridListTile>\n\n                ))}\n\n            </GridList>\n            <AppBar position=\"fixed\" color=\"primary\" className={classes.appBar}>\n                <Button variant=\"contained\" style={{ fontSize: '1em', backgroundColor: \"#00b900\", color: \"#fff\", fontWeight: \"bold\" }} onClick={openDialogSelectAddress}>\n                    {\"ซื้อ\"}\n                </Button>\n            </AppBar>\n            <DialogListOrder></DialogListOrder>\n            <DialogSelectAddress></DialogSelectAddress>\n            <DialogBuyProduct></DialogBuyProduct>\n        </div >\n    )\n};\n\nexport default ProductView;","/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/views/AddProductView/index.js",["164","165"],"import React from 'react';\nimport {\n    makeStyles\n} from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fireStore } from '../../firebase.config';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText'\nimport Divider from '@material-ui/core/Divider';\nimport DialogAddProduct from '../../components/DialogAddProduct'\nimport DialogUpdateProduct from '../../components/DialogUpdateProduct'\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\n\nconst useStyles = makeStyles((theme) => ({\n    avatars: {\n        width: theme.spacing(10),\n        height: theme.spacing(10),\n    },\n    appBar: {\n        top: 'auto',\n        bottom: 0,\n        backgroundColor: 'white',\n        padding: 15,\n    },\n    layout: {\n        padding: \"10px 0px\"\n    },\n    app: {\n        height: 450\n    }\n}));\n\n// function TransitionDown(props) {\n//     return <Slide {...props} direction=\"down\" />;\n// }\n\n// function Alert(props) {\n//     return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n// }\n\nfunction AddProductView() {\n    const dispatch = useDispatch();\n    const classes = useStyles();\n    // const parsed = queryString.parse(window.location.search);\n    const user = useSelector(state => state.user);\n    const product = useSelector(state => state.product);\n    const control = useSelector(state => state.control);\n\n    function openDialogAddProduct() {\n        dispatch({ type: \"CONTROL_OPEN_DIALOG_ADD_PRODUCT\", payload: !control.openDialogAddProduct })\n    }\n    const appRef = fireStore.collection(\"line_apps\");\n\n    const openDialogUpdateProduct = (prop, number) => (event) => {\n        console.log(prop, number);\n        dispatch({ type: \"PRODUCT_UPDATE_NUMBER\", payload: number })\n        dispatch({ type: \"PRODUCT_UPDATE_ID\", payload: prop.id })\n        dispatch({ type: \"PRODUCT_UPDATE_NAME\", payload: prop.name })\n        dispatch({ type: \"PRODUCT_UPDATE_PRUDUCT_ID\", payload: prop.productId })\n        dispatch({ type: \"PRODUCT_UPDATE_PRICE\", payload: prop.price })\n        dispatch({ type: \"PRODUCT_UPDATE_IMAGE\", payload: prop.image })\n        dispatch({ type: \"CONTROL_OPEN_DIALOG_UPDATE_PRODUCT\", payload: !control.openDialogUpdateProduct })\n    }\n\n    React.useEffect(() => {\n        const data = [];\n        appRef.doc(sessionStorage.getItem(\"liff_id\")).collection(\"users\").doc(user.userId).collection(\"products\").get().then(snapshot => {\n            snapshot.docs.forEach(hospital => {\n                data.push(hospital.data())\n            });\n            dispatch({ type: \"PRODUCT_STORAGE\", payload: data })\n            dispatch({ type: \"AUTH_FIST_PATH\", payload: sessionStorage.getItem(\"fist_path\") })\n            dispatch({ type: \"AUTH_LIFF_ID\", payload: sessionStorage.getItem(\"liff_id\") })\n        })\n    }, [])\n\n    return (\n        <div style={{ paddingBottom: 70 }}>\n\n            <List\n                component=\"nav\"\n                aria-labelledby=\"nested-list-subheader\"\n                subheader={\n                    <ListSubheader component=\"div\" id=\"nested-list-subheader\" style={{ backgroundColor: \"white\" }}>\n                        {\"สินค้า\"}\n                    </ListSubheader>\n                }\n                className={classes.root}\n            >\n                {product.storage.map((data, key) => (\n                    <React.Fragment key={key}>\n\n                        <ListItem alignItems=\"flex-start\">\n                            <Divider></Divider>\n                            <ListItemAvatar>\n                                <Avatar variant=\"rounded\" alt=\"Remy Sharp\" src={data.image} style={{\n                                    width: 65,\n                                    height: 65\n                                }} />\n                            </ListItemAvatar>\n                            <ListItem button onClick={openDialogUpdateProduct(data, key)}>\n                                <ListItemText\n                                    primary={data.productId}\n                                    secondary={\n                                        <React.Fragment>\n                                            <Typography\n                                                component=\"span\"\n                                                variant=\"body2\"\n                                                className={classes.inline}\n                                                color=\"textPrimary\"\n                                            >\n                                                {data.name}\n                                            </Typography>\n                                            {\" — \" + data.price}\n                                        </React.Fragment>\n                                    }\n                                />\n                            </ListItem>\n                        </ListItem>\n                        <Divider variant=\"inset\" component=\"li\" />\n                    </React.Fragment>\n                ))}\n\n            </List>\n            <AppBar position=\"fixed\" color=\"primary\" className={classes.appBar}>\n                <Button variant=\"contained\" style={{ fontSize: '1em', backgroundColor: \"#00b900\", color: \"#fff\", fontWeight: \"bold\" }} onClick={openDialogAddProduct}>\n                    {\"เพิ่มสินค้า\"}\n                </Button>\n            </AppBar>\n            <DialogAddProduct></DialogAddProduct>\n            <DialogUpdateProduct></DialogUpdateProduct>\n        </div>\n    )\n};\n\nexport default AddProductView;","/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/views/SettingView/index.js",["166","167"],"import React from 'react';\nimport {\n    makeStyles\n} from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fireStore } from '../../firebase.config';\nimport queryString from \"query-string\";\nimport NumberPhoneInput from '../../components/NumberPhoneInput';\nimport DialogChangNumberPhone from '../../components/DialogChangNumberPhone';\n// import liff from '@line/liff';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport Slide from '@material-ui/core/Slide';\nimport MuiAlert from '@material-ui/lab/Alert';\n\nconst useStyles = makeStyles((theme) => ({\n    avatars: {\n        width: theme.spacing(10),\n        height: theme.spacing(10),\n    },\n    appBar: {\n        top: 'auto',\n        bottom: 0,\n        backgroundColor: 'white',\n        padding: 15,\n    },\n    layout: {\n        padding: \"10px 0px\"\n    },\n    app: {\n        height: 450\n    }\n}));\n\nfunction TransitionDown(props) {\n    return <Slide {...props} direction=\"down\" />;\n}\n\nfunction Alert(props) {\n    return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n}\n\nfunction SettingView() {\n    const dispatch = useDispatch();\n    const classes = useStyles();\n    const parsed = queryString.parse(window.location.search);\n    const user = useSelector(state => state.user);\n    const control = useSelector(state => state.control);\n\n    function openDialog() {\n        dispatch({ type: \"CONTROL_OPEN_DIALOG_CHANG_NUMBER_PHONE\", payload: !control.openDialogChangNumber })\n    }\n    const appRef = fireStore.collection(\"line_apps\");\n\n    async function Update() {\n        await appRef.doc(parsed.liff_id).collection(\"users\").doc(user.userId).update({\n            userId: user.userId,\n            displayName: user.displayName,\n            pictureUrl: user.pictureUrl,\n            numberPhone: user.numberPhone\n        }).then(function () {\n            dispatch({ type: \"AUTH_STATUS\", payload: true })\n            dispatch({ type: \"CONTROL_OPEN_SNACKBARK_UPDATE_NUMBER_PHONE_SECCUSS\", payload: !control.openSnackbarUpdateNumberSeccuss })\n            // liff.init({ liffId: `${parsed.liff_id}` }).then(async () => {\n            //     await liff.init().closeWindow()\n\n            // }).catch(err => { throw err });\n\n\n        });\n\n    }\n\n    function handleClose() {\n        dispatch({ type: \"CONTROL_OPEN_SNACKBARK_UPDATE_NUMBER_PHONE_SECCUSS\", payload: !control.openSnackbarUpdateNumberSeccuss })\n    }\n\n    React.useEffect(() => {\n        dispatch({ type: \"AUTH_FIST_PATH\", payload: window.location.pathname })\n        dispatch({ type: \"AUTH_LIFF_ID\", payload: parsed.liff_id })\n    }, [window.location.pathname])\n    return (\n        <div>\n            <Grid\n                container\n                direction=\"row\"\n                justify=\"center\"\n                alignItems=\"center\"\n                className={classes.app}\n            >\n                <Grid item xs={12}>\n                    <Grid\n                        container\n                        direction=\"column\"\n                        justify=\"center\"\n                        alignItems=\"center\"\n                    >\n                        <Grid item xs={12}>\n                            <Grid\n                                container\n                                direction=\"row\"\n                                justify=\"center\"\n                                alignItems=\"center\"\n                                className={classes.layout}\n                                style={{\n                                    paddingTop: 20\n                                }}\n                            >\n                                <Avatar alt={user.displayName} src={user.pictureUrl} className={classes.avatars} />\n                            </Grid>\n                            <Grid\n                                container\n                                direction=\"row\"\n                                justify=\"center\"\n                                alignItems=\"center\"\n                                className={classes.layout}\n                            >\n                                <Typography variant=\"h6\" component=\"h6\">\n                                    {user.displayName}\n                                </Typography>\n                            </Grid>\n                            <Grid\n                                container\n                                direction=\"row\"\n                                justify=\"center\"\n                                alignItems=\"center\"\n                                className={classes.layout}\n                                style={{\n                                    paddingTop: 20\n                                }}\n                            >\n                                <label htmlFor=\"phone\">{\"หมายเลขโทรศัพท์ที่ลงทะเบียน:\"}</label>\n                                <NumberPhoneInput type=\"tel\" id=\"phone\" name=\"phone\" pattern=\"[0-9]{3} [0-9]{2} [0-9]{3} [0-9]{4}\" placeholder=\"+66 80 123 1234\" value={user.numberPhone} onClick={openDialog}></NumberPhoneInput>\n                            </Grid>\n                        </Grid>\n                        <Grid item xs={12}></Grid>\n                    </Grid>\n                </Grid>\n            </Grid>\n            <AppBar position=\"fixed\" color=\"primary\" className={classes.appBar}>\n                <Button variant=\"contained\" style={{ fontSize: '1em', backgroundColor: \"#00b900\", color: \"#fff\", fontWeight: \"bold\" }} onClick={Update}>\n                    {\"เปลี่ยนหมายเลขโทรศัพท์\"}\n                </Button>\n            </AppBar>\n            <DialogChangNumberPhone></DialogChangNumberPhone>\n            <Snackbar\n                anchorOrigin={{ vertical: 'top', horizontal: 'center' }}\n                open={control.openSnackbarUpdateNumberSeccuss}\n                onClose={handleClose}\n                style={{ backgroundColor: 'white' }}\n                ContentProps={{ style: { backgroundColor: 'white',\n                boxShadow: '0px 3px 5px -1px rgb(0 0 0 / 0%), 0px 6px 10px 0px rgb(0 0 0 / 0%), 0px 1px 18px 0px rgb(0 0 0 / 0%)' } }}\n                TransitionComponent={TransitionDown}\n                autoHideDuration={6000}\n                message={<Alert onClose={handleClose} severity=\"success\">\n                    {`บันทึกหมายเลขโทรศัพท์ ${user.numberPhone}`}\n                </Alert>}\n                key={\"top\" + \"center\"}\n            >\n\n            </Snackbar>\n        </div>\n    )\n};\n\nexport default SettingView;","/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/views/SetupView/index.js",["168"],"import React from 'react';\nimport {\n    makeStyles\n} from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fireStore } from '../../firebase.config';\nimport queryString from \"query-string\";\nimport NumberPhoneInput from '../../components/NumberPhoneInput';\nimport { useHistory } from 'react-router-dom';\nimport liff from \"@line/liff\";\nimport Loading from '../../components/Loading';\nimport { Redirect } from 'react-router-dom'\n\nconst useStyles = makeStyles((theme) => ({\n    avatars: {\n        width: theme.spacing(10),\n        height: theme.spacing(10),\n    },\n    appBar: {\n        top: 'auto',\n        bottom: 0,\n        backgroundColor: 'white',\n        padding: 15,\n    },\n    layout: {\n        padding: \"10px 0px\"\n    },\n    app: {\n        height: 450\n    }\n}));\n\n\nfunction SetupView() {\n    const [loading, setLoading] = React.useState(true);\n    const dispatch = useDispatch();\n    const classes = useStyles();\n    const parsed = queryString.parse(window.location.search);\n    const user = useSelector(state => state.user);\n    const auth = useSelector(state => state.auth);\n    // const [status,setStatus] = React.useState(false)\n    const history = useHistory();\n    const handleChange = (prop) => (event) => {\n        dispatch({ type: \"USER_NUMBER_PHONE\", payload: event.target.value })\n    };\n    const appRef = fireStore.collection(\"line_apps\");\n\n    async function Update() {\n        await appRef.doc(parsed.liff_id).collection(\"users\").doc(user.userId).update({\n            userId: user.userId,\n            displayName: user.displayName,\n            pictureUrl: user.pictureUrl,\n            numberPhone: user.numberPhone\n        }).then(function () {\n            dispatch({ type: \"AUTH_STATUS\", payload: true });\n            history.push(`${parsed.pathname}?liff_id=${parsed.liff_id}`)\n        });\n\n    }\n    React.useEffect(() => {\n        const appRef = fireStore.collection(\"line_apps\");\n        if (sessionStorage.getItem(\"liff_id\")) {\n            liff.init({ liffId: `${sessionStorage.getItem(\"liff_id\")}` }).then(async () => {\n\n                if (liff.isLoggedIn()) {\n                    const getProfile = await liff.getProfile();\n                    console.log(getProfile);\n\n                    const userId = await appRef.doc(sessionStorage.getItem(\"liff_id\")).collection(\"users\").doc(getProfile.userId).get();\n\n                    if (!userId.exists) {\n                        console.log(\"No such document!\");\n                        dispatch({ type: \"AUTH_STATUS\", payload: false })\n                        dispatch({ type: \"USER_DISPLAY_NAME\", payload: getProfile.displayName });\n                        dispatch({ type: \"USER_ID\", payload: getProfile.userId });\n                        dispatch({ type: \"USER_PICTURE_URL\", payload: getProfile.pictureUrl });\n                        await appRef.doc(sessionStorage.getItem(\"liff_id\")).collection(\"users\").doc(getProfile.userId).set({ ...getProfile })\n\n                    } else {\n                       \n                        console.log(\"getProfile line:\", getProfile);\n                        if (userId.data().numberPhone) {\n                            console.log(\"Document data:\", userId.data());\n                            dispatch({ type: \"AUTH_STATUS\", payload: true })\n                            dispatch({ type: \"USER_DISPLAY_NAME\", payload: userId.data().displayName });\n                            dispatch({ type: \"USER_ID\", payload: userId.data().userId });\n                            dispatch({ type: \"USER_PICTURE_URL\", payload: userId.data().pictureUrl });\n                            dispatch({ type: \"USER_NUMBER_PHONE\", payload: userId.data().numberPhone })\n                            setLoading(false)\n                            // setStatus(auth.status)\n                        } else {\n                            dispatch({ type: \"AUTH_STATUS\", payload: false })\n                            dispatch({ type: \"USER_DISPLAY_NAME\", payload: userId.data().displayName });\n                            dispatch({ type: \"USER_ID\", payload: userId.data().userId });\n                            dispatch({ type: \"USER_PICTURE_URL\", payload: userId.data().pictureUrl });\n                            setLoading(false)\n                        }\n                    }\n                } else {\n                    dispatch({ type: \"AUTH_FIST_PATH\", payload: window.location.pathname })\n\n                    liff.login({ redirectUri: `${window.location.href}` });\n                    console.log(\"a\");\n                }\n\n            }).catch(err => { throw err });\n        } else {\n            // setLoading(false)\n            console.log(\"b\");\n            dispatch({ type: \"AUTH_LIFF_ID\", payload: parsed.liff_id })\n        }\n    }, [auth.status])\n\n    return (\n        <div>\n            {loading ? (<React.Fragment>\n                <Loading></Loading>\n            </React.Fragment>) : (<React.Fragment>\n                {auth.status ? (<React.Fragment>\n                    <Redirect to={`${parsed.pathname}?liff_id=${parsed.liff_id}`}></Redirect>\n                </React.Fragment>) : (<React.Fragment>\n                    <Grid\n                        container\n                        direction=\"row\"\n                        justify=\"center\"\n                        alignItems=\"center\"\n                        className={classes.app}\n                    >\n                        <Grid item xs={12}>\n                            <Grid\n                                container\n                                direction=\"column\"\n                                justify=\"center\"\n                                alignItems=\"center\"\n                            >\n                                <Grid item xs={12}>\n                                    <Grid\n                                        container\n                                        direction=\"row\"\n                                        justify=\"center\"\n                                        alignItems=\"center\"\n                                        className={classes.layout}\n                                        style={{\n                                            paddingTop: 20\n                                        }}\n                                    >\n                                        <Avatar alt={user.displayName} src={user.pictureUrl} className={classes.avatars} />\n                                    </Grid>\n                                    <Grid\n                                        container\n                                        direction=\"row\"\n                                        justify=\"center\"\n                                        alignItems=\"center\"\n                                        className={classes.layout}\n                                    >\n                                        <Typography variant=\"h6\" component=\"h6\">\n                                            {user.displayName}\n                                        </Typography>\n                                    </Grid>\n                                    <Grid\n                                        container\n                                        direction=\"row\"\n                                        justify=\"center\"\n                                        alignItems=\"center\"\n                                        className={classes.layout}\n                                        style={{\n                                            paddingTop: 20\n                                        }}\n                                    >\n                                        <label htmlFor=\"phone\">{\"ลงทะเบียนหมายเลขโทรศัพท์:\"}</label>\n                                        <NumberPhoneInput type=\"tel\" id=\"phone\" name=\"phone\" pattern=\"[0-9]{3} [0-9]{2} [0-9]{3} [0-9]{4}\" placeholder=\"+66 80 123 1234\" onChange={handleChange()}></NumberPhoneInput>\n                                    </Grid>\n                                </Grid>\n                                <Grid item xs={12}></Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <AppBar position=\"fixed\" color=\"primary\" className={classes.appBar}>\n                        <Button variant=\"contained\" style={{ fontSize: '1em', backgroundColor: \"#00b900\", color: \"#fff\", fontWeight: \"bold\" }} onClick={Update}>\n                            {\"เพิ่มหมายเลขโทรศัพท์\"}\n                        </Button>\n                    </AppBar>\n                </React.Fragment>)}\n\n            </React.Fragment>)}\n\n        </div>\n    )\n};\n\nexport default SetupView;","/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/components/Loading/index.js",[],"/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/firebase.config.js",[],"/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/components/DialogUpdateAddress/index.js",["169","170","171"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport Grid from '@material-ui/core/Grid';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Slide from '@material-ui/core/Slide';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport NumberPhoneInput from '../NumberPhoneInput';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText'\nimport Divider from '@material-ui/core/Divider';\nimport InputBase from '@material-ui/core/InputBase';\nimport { fireStore } from '../../firebase.config'\nimport DialogDeleteAddress from \"../DialogDeleteAddress\";\n\nconst useStyles = makeStyles((theme) => ({\n    appBar: {\n        position: 'relative',\n        backgroundColor: \"#7d8690\",\n    },\n    appBarBottom: {\n        top: 'auto',\n        bottom: 0,\n        backgroundColor: 'white',\n        padding: 15,\n    },\n    title: {\n        // marginLeft: theme.spacing(2),\n        flex: 1,\n    },\n}));\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function DialogUpdateAddress() {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const control = useSelector(state => state.control);\n    const address = useSelector(state => state.address);\n    const user = useSelector(state => state.user);\n\n    const appRef = fireStore.collection(\"line_apps\");\n\n    const handleClose = () => {\n        dispatch({ type: \"CONTROL_OPEN_DIALOG_UPDATE_ADDRESS\", payload: !control.openDialogUpdateAddress })\n    };\n\n    const handleChange = (prop) => (event) => {\n        switch (prop) {\n            case \"name\":\n                dispatch({ type: \"ADDRESS_UPDATE_NAME\", payload: event.target.value })\n                break;\n            case \"numberPhone\":\n                dispatch({ type: \"ADDRESS_UPDATE_NUMBER_PHONE\", payload: event.target.value })\n                break;\n            case \"address\":\n                dispatch({ type: \"ADDRESS_UPDATE_ADDRESS\", payload: event.target.value })\n                break;\n            default:\n                break;\n        }\n\n    };\n\n    async function Add() {\n        const addressRef = appRef.doc(sessionStorage.getItem(\"liff_id\")).collection(\"users\").doc(user.userId).collection(\"address\").doc(address.updateId);\n        await addressRef.set({\n            id: address.updateId,\n            name: address.updateName,\n            numberPhone: address.updateNumberPhone,\n            address: address.updateAddress\n        }).then(function () {\n            address.storage[address.updateNumber].name = address.updateName;\n            address.storage[address.updateNumber].numberPhone = address.updateNumberPhone;\n            address.storage[address.updateNumber].address = address.updateAddress;\n            dispatch({ type: \"ADDRESS_STORAGE\", payload: address.storage });\n            dispatch({ type: \"CONTROL_OPEN_DIALOG_UPDATE_ADDRESS\", payload: !control.openDialogUpdateAddress })\n\n        });\n    }\n\n    function Delete() {\n        dispatch({ type: \"CONTROL_OPEN_DIALOG_DELETE_ADDRESS\", payload: !control.openDialogDeleteAddress })\n    }\n\n    return (\n\n        <Dialog fullScreen open={control.openDialogUpdateAddress} onClose={handleClose} TransitionComponent={Transition}>\n            <AppBar className={classes.appBar}>\n                <Toolbar>\n\n                    <Typography variant=\"h6\" className={classes.title}>\n                        {\"แก้ไขที่อยู่จัดส่ง\"}\n                    </Typography>\n                    <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\n                        <CloseIcon />\n                    </IconButton>\n                </Toolbar>\n            </AppBar>\n            <React.Fragment>\n                <ListItem button>\n                    <ListItemText\n                        primary={<Typography\n                            component=\"span\"\n                            variant=\"body2\"\n                            // className={classes.inline}\n                            color=\"textPrimary\"\n                        >\n                            {\"ผู้รับ\"}\n                        </Typography>}\n                        secondary={\n                            <React.Fragment>\n                                <InputBase\n                                    defaultValue={address.updateName}\n                                    placeholder=\"โปรดกรอกชื่อผู้รับ\"\n                                    style={{ width: '100%' }}\n                                    onChange={handleChange(\"name\")}></InputBase>\n                            </React.Fragment>\n                        }\n                    />\n                </ListItem>\n                <Divider></Divider>\n            </React.Fragment>\n            <React.Fragment>\n                <ListItem button>\n                    <ListItemText\n                        primary={<Typography\n                            component=\"span\"\n                            variant=\"body2\"\n                            // className={classes.inline}\n                            color=\"textPrimary\"\n                        >\n                            {\"หมายเลขโทรศัพท์มือถือ\"}\n                        </Typography>}\n                        secondary={\n                            <React.Fragment>\n                                <InputBase\n                                    defaultValue={address.updateNumberPhone}\n                                    placeholder=\"โปรดกรอกหมายเลขโทรศัพท์มือถือผู้รับ\"\n                                    style={{ width: '100%' }}\n                                    onChange={handleChange(\"numberPhone\")}></InputBase>\n                            </React.Fragment>\n                        }\n                    />\n                </ListItem>\n                <Divider></Divider>\n            </React.Fragment>\n            <React.Fragment>\n                <ListItem button>\n                    <ListItemText\n                        primary={<Typography\n                            component=\"span\"\n                            variant=\"body2\"\n                            // className={classes.inline}\n                            color=\"textPrimary\"\n                        >\n                            {\"ที่อยู่จัดส่ง\"}\n                        </Typography>}\n                        secondary={\n                            <React.Fragment>\n                                <InputBase\n                                    rows={4}\n                                    defaultValue={address.updateAddress}\n                                    multiline\n                                    placeholder=\"โปรดกรอกรายละเอียดที่อยู่ เช่นบ้านเลขที่ หมู่บ้าน ถนน เขต ตำบล อำเภอ จังหวัด รหัสไปรษณีย์ \"\n                                    style={{ width: '100%' }}\n                                    onChange={handleChange(\"address\")}></InputBase>\n                            </React.Fragment>\n                        }\n                    />\n                </ListItem>\n                <Divider></Divider>\n            </React.Fragment>\n            <AppBar position=\"fixed\" color=\"primary\" className={classes.appBarBottom}>\n                <Grid\n                    container\n                    direction=\"row\"\n                    justify=\"center\"\n                    alignItems=\"center\"\n                    spacing={2}\n                >\n                    <Grid item xs={8}>\n                        <Button\n                            variant=\"contained\"\n                            style={{\n                                fontSize: '1em',\n                                backgroundColor: \"#00b900\",\n                                color: \"#fff\",\n                                fontWeight: \"bold\",\n                                width: '100%'\n                            }} onClick={Add}>\n                            {\"บันทึก\"}\n                        </Button>\n                    </Grid>\n                    <Grid item xs={4} >\n                        <Button\n                            variant=\"contained\"\n                            style={{\n                                fontSize: '1em',\n                                backgroundColor: \"#f44336\",\n                                color: \"#fff\",\n                                fontWeight: \"bold\",\n                                width: '100%'\n                            }} onClick={Delete}>\n                            {\"ลบ\"}\n                        </Button>\n                    </Grid>\n                </Grid>\n            </AppBar>\n            <DialogDeleteAddress></DialogDeleteAddress>\n        </Dialog>\n    );\n}\n","/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/components/DialogAddAddress/index.js",["172","173","174","175","176"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport Grid from '@material-ui/core/Grid';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Slide from '@material-ui/core/Slide';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport NumberPhoneInput from '../NumberPhoneInput';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText'\nimport Divider from '@material-ui/core/Divider';\nimport InputBase from '@material-ui/core/InputBase';\nimport { fireStore } from '../../firebase.config'\nimport queryString from \"query-string\";\n\nconst useStyles = makeStyles((theme) => ({\n    appBar: {\n        position: 'relative',\n        backgroundColor: \"#7d8690\",\n    },\n    appBarBottom: {\n        top: 'auto',\n        bottom: 0,\n        backgroundColor: 'white',\n        padding: 15,\n    },\n    title: {\n        // marginLeft: theme.spacing(2),\n        flex: 1,\n    },\n}));\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function DialogAddAddress() {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const control = useSelector(state => state.control);\n    const address = useSelector(state => state.address);\n    const user = useSelector(state => state.user);\n    const appRef = fireStore.collection(\"line_apps\");\n    const parsed = queryString.parse(window.location.search);\n\n    const handleClose = () => {\n        dispatch({ type: \"CONTROL_OPEN_DIALOG_ADD_ADDRESS\", payload: !control.openDialogAddAddress })\n    };\n\n    const handleChange = (prop) => (event) => {\n        switch (prop) {\n            case \"name\":\n                dispatch({ type: \"ADDRESS_ADD_NAME\", payload: event.target.value })\n                break;\n            case \"numberPhone\":\n                dispatch({ type: \"ADDRESS_ADD_NUMBER_PHONE\", payload: event.target.value })\n                break;\n            case \"address\":\n                dispatch({ type: \"ADDRESS_ADD_ADDRESS\", payload: event.target.value })\n                break;\n            default:\n                break;\n        }\n\n    };\n\n    async function Add() {\n        const arr = address.storage;\n\n\n\n        const addressRef = appRef.doc(sessionStorage.getItem(\"liff_id\")).collection(\"users\").doc(user.userId).collection(\"address\").doc();\n        await addressRef.set({\n            id: addressRef.id,\n            name: address.addName,\n            numberPhone: address.addNumbeerPhone,\n            address: address.addAddress\n        }).then(function () {\n            arr.push({\n                id: addressRef.id,\n                name: address.addName,\n                numberPhone: address.addNumbeerPhone,\n                address: address.addAddress\n            })\n\n            dispatch({ type: \"ADDRESS_STORAGE\", payload: arr });\n            dispatch({ type: \"CONTROL_OPEN_DIALOG_ADD_ADDRESS\", payload: !control.openDialogAddAddress })\n\n\n\n\n        });\n    }\n\n    return (\n\n        <Dialog fullScreen open={control.openDialogAddAddress} onClose={handleClose} TransitionComponent={Transition}>\n            <AppBar className={classes.appBar}>\n                <Toolbar>\n\n                    <Typography variant=\"h6\" className={classes.title}>\n                        {\"เพิ่มที่อยู่จัดส่ง\"}\n                    </Typography>\n                    <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\n                        <CloseIcon />\n                    </IconButton>\n                </Toolbar>\n            </AppBar>\n            <React.Fragment>\n                <ListItem button>\n                    <ListItemText\n                        primary={<Typography\n                            component=\"span\"\n                            variant=\"body2\"\n                            // className={classes.inline}\n                            color=\"textPrimary\"\n                        >\n                            {\"ผู้รับ\"}\n                        </Typography>}\n                        secondary={\n                            <React.Fragment>\n                                <InputBase\n                                    placeholder=\"โปรดกรอกชื่อผู้รับ\"\n                                    style={{ width: '100%' }}\n                                    onChange={handleChange(\"name\")}></InputBase>\n                            </React.Fragment>\n                        }\n                    />\n                </ListItem>\n                <Divider></Divider>\n            </React.Fragment>\n            <React.Fragment>\n                <ListItem button>\n                    <ListItemText\n                        primary={<Typography\n                            component=\"span\"\n                            variant=\"body2\"\n                            // className={classes.inline}\n                            color=\"textPrimary\"\n                        >\n                            {\"หมายเลขโทรศัพท์มือถือ\"}\n                        </Typography>}\n                        secondary={\n                            <React.Fragment>\n                                <InputBase\n                                    placeholder=\"โปรดกรอกหมายเลขโทรศัพท์มือถือผู้รับ\"\n                                    style={{ width: '100%' }}\n                                    onChange={handleChange(\"numberPhone\")}></InputBase>\n                            </React.Fragment>\n                        }\n                    />\n                </ListItem>\n                <Divider></Divider>\n            </React.Fragment>\n            <React.Fragment>\n                <ListItem button>\n                    <ListItemText\n                        primary={<Typography\n                            component=\"span\"\n                            variant=\"body2\"\n                            // className={classes.inline}\n                            color=\"textPrimary\"\n                        >\n                            {\"ที่อยู่จัดส่ง\"}\n                        </Typography>}\n                        secondary={\n                            <React.Fragment>\n                                <InputBase\n                                    rows={4}\n                                    multiline\n                                    placeholder=\"โปรดกรอกรายละเอียดที่อยู่ เช่นบ้านเลขที่ หมู่บ้าน ถนน เขต ตำบล อำเภอ จังหวัด รหัสไปรษณีย์ \"\n                                    style={{ width: '100%' }}\n                                    onChange={handleChange(\"address\")}></InputBase>\n                            </React.Fragment>\n                        }\n                    />\n                </ListItem>\n                <Divider></Divider>\n            </React.Fragment>\n            <AppBar position=\"fixed\" color=\"primary\" className={classes.appBarBottom}>\n                <Button variant=\"contained\" style={{ fontSize: '1em', backgroundColor: \"#00b900\", color: \"#fff\", fontWeight: \"bold\" }} onClick={Add}>\n                    {\"บันทึก\"}\n                </Button>\n            </AppBar>\n        </Dialog>\n    );\n}\n","/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/components/DialogAddProduct/index.js",["177","178","179","180"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport Grid from '@material-ui/core/Grid';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Slide from '@material-ui/core/Slide';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport NumberPhoneInput from '../NumberPhoneInput';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText'\nimport Divider from '@material-ui/core/Divider';\nimport InputBase from '@material-ui/core/InputBase';\nimport { fireStore } from '../../firebase.config'\nimport queryString from \"query-string\";\nimport Avatar from '@material-ui/core/Avatar';\nimport ImageSearchIcon from '@material-ui/icons/ImageSearch';\n\nconst useStyles = makeStyles((theme) => ({\n    appBar: {\n        position: 'relative',\n        backgroundColor: \"#7d8690\",\n    },\n    appBarBottom: {\n        top: 'auto',\n        bottom: 0,\n        backgroundColor: 'white',\n        padding: 15,\n    },\n    title: {\n        // marginLeft: theme.spacing(2),\n        flex: 1,\n    },\n    input: {\n        display: 'none',\n    },\n}));\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function DialogAddProduct() {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const control = useSelector(state => state.control);\n    const product = useSelector(state => state.product);\n    const user = useSelector(state => state.user);\n    const appRef = fireStore.collection(\"line_apps\");\n    const parsed = queryString.parse(window.location.search);\n\n    const handleClose = () => {\n        dispatch({ type: \"CONTROL_OPEN_DIALOG_ADD_PRODUCT\", payload: !control.openDialogAddProduct })\n    };\n\n    const handleChange = (prop) => (event) => {\n        switch (prop) {\n            case \"name\":\n                dispatch({ type: \"PRODUCT_ADD_NAME\", payload: event.target.value })\n                break;\n            case \"price\":\n                dispatch({ type: \"PRODUCT_ADD_PRICE\", payload: event.target.value })\n                break;\n            case \"image\":\n                // console.log(event.target.files[0]);\n                var reader = new FileReader();\n                var baseString;\n                reader.onloadend = function () {\n                    baseString = reader.result;\n                    console.log(baseString);\n                    dispatch({ type: \"PRODUCT_ADD_IMAGE\", payload: baseString })\n                };\n                reader.readAsDataURL(event.target.files[0]);\n\n                break;\n            case \"productId\":\n                dispatch({ type: \"PRODUCT_ADD_PRUDUCT_ID\", payload: event.target.value })\n                break;\n            default:\n                break;\n        }\n\n    };\n\n    async function Add() {\n        const arr = product.storage;\n        const addressRef = appRef.doc(sessionStorage.getItem(\"liff_id\")).collection(\"users\").doc(user.userId).collection(\"products\").doc();\n        await addressRef.set({\n            id: addressRef.id,\n            name: product.addName,\n            productId: product.addProductId,\n            price: product.addPrice,\n            image: product.addImage\n        }).then(function () {\n            arr.push({\n                id: addressRef.id,\n                name: product.addName,\n                productId: product.addProductId,\n                price: product.addPrice,\n                image: product.addImage\n            })\n            dispatch({ type: \"PRODUCT_ADD_IMAGE\", payload: \"\" })\n            dispatch({ type: \"PRODUCT_STORAGE\", payload: arr });\n            dispatch({ type: \"CONTROL_OPEN_DIALOG_ADD_PRODUCT\", payload: !control.openDialogAddProduct })\n\n\n\n\n        });\n    }\n\n    return (\n\n        <Dialog fullScreen open={control.openDialogAddProduct} onClose={handleClose} TransitionComponent={Transition}>\n            <AppBar className={classes.appBar}>\n                <Toolbar>\n\n                    <Typography variant=\"h6\" className={classes.title}>\n                        {\"เพิ่มสินค้า\"}\n                    </Typography>\n                    <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\n                        <CloseIcon />\n                    </IconButton>\n                </Toolbar>\n            </AppBar>\n            <React.Fragment>\n                <ListItem button>\n                    <ListItemText\n                        primary={<Typography\n                            component=\"span\"\n                            variant=\"body2\"\n                            // className={classes.inline}\n                            color=\"textPrimary\"\n                        >\n                            {\"รหัสสินค้า\"}\n                        </Typography>}\n                        secondary={\n                            <React.Fragment>\n                                <InputBase\n                                    placeholder=\"โปรดกรอกรหัสสินค้า\"\n                                    style={{ width: '100%' }}\n                                    onChange={handleChange(\"productId\")}></InputBase>\n                            </React.Fragment>\n                        }\n                    />\n                </ListItem>\n                <Divider></Divider>\n            </React.Fragment>\n            <React.Fragment>\n                <ListItem button>\n                    <ListItemText\n                        primary={<Typography\n                            component=\"span\"\n                            variant=\"body2\"\n                            // className={classes.inline}\n                            color=\"textPrimary\"\n                        >\n                            {\"ชื่อสินค้า\"}\n                        </Typography>}\n                        secondary={\n                            <React.Fragment>\n                                <InputBase\n                                    placeholder=\"โปรดกรอกชื่อสินค้า\"\n                                    style={{ width: '100%' }}\n                                    onChange={handleChange(\"name\")}></InputBase>\n                            </React.Fragment>\n                        }\n                    />\n                </ListItem>\n                <Divider></Divider>\n            </React.Fragment>\n            <React.Fragment>\n                <ListItem button>\n                    <ListItemText\n                        primary={<Typography\n                            component=\"span\"\n                            variant=\"body2\"\n                            // className={classes.inline}\n                            color=\"textPrimary\"\n                        >\n                            {\"ราคาสินค้า\"}\n                        </Typography>}\n                        secondary={\n                            <React.Fragment>\n                                <InputBase\n                                    placeholder=\"โปรดกรอกราคาสินค้า\"\n                                    style={{ width: '100%' }}\n                                    onChange={handleChange(\"price\")}></InputBase>\n                            </React.Fragment>\n                        }\n                    />\n                </ListItem>\n                <Divider></Divider>\n            </React.Fragment>\n            <React.Fragment>\n                <ListItem button>\n                    <ListItemText\n                        primary={<Typography\n                            component=\"span\"\n                            variant=\"body2\"\n                            // className={classes.inline}\n                            color=\"textPrimary\"\n                        >\n                            {\"รูปสินค้า\"}\n                        </Typography>}\n                        secondary={\n                            <React.Fragment>\n                                <input accept=\"image/*\" className={classes.input} id=\"icon-button-file\" type=\"file\" onChange={handleChange(\"image\")} />\n                                <label htmlFor=\"icon-button-file\">\n                                    <Grid\n                                        container\n                                        direction=\"row\"\n                                        justify=\"center\"\n                                        alignItems=\"center\"\n                                    >\n                                        <Avatar variant=\"rounded\" alt=\"+\" style={{ width: 150, height: 150 }} >\n                                            {product.addImage ? (<React.Fragment>\n                                                <Avatar variant=\"rounded\" alt=\"+\" src={product.addImage} style={{ width: 150, height: 150 }} />\n                                            </React.Fragment>) : (<React.Fragment>\n                                                <ImageSearchIcon style={{\n                                                    fontSize: 80\n                                                }}></ImageSearchIcon>\n                                            </React.Fragment>)}\n\n                                        </Avatar>\n                                    </Grid>\n                                </label>\n                            </React.Fragment>\n                        }\n                    />\n                </ListItem>\n                <Divider></Divider>\n            </React.Fragment>\n            <AppBar position=\"fixed\" color=\"primary\" className={classes.appBarBottom}>\n                <Button variant=\"contained\" style={{ fontSize: '1em', backgroundColor: \"#00b900\", color: \"#fff\", fontWeight: \"bold\" }} onClick={Add}>\n                    {\"บันทึก\"}\n                </Button>\n            </AppBar>\n        </Dialog>\n    );\n}\n","/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/components/DialogListOrder/index.js",["181","182","183","184","185","186","187","188","189"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport Grid from '@material-ui/core/Grid';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Slide from '@material-ui/core/Slide';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport NumberPhoneInput from '../NumberPhoneInput';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText'\nimport Divider from '@material-ui/core/Divider';\nimport InputBase from '@material-ui/core/InputBase';\nimport { fireStore } from '../../firebase.config'\nimport queryString from \"query-string\";\nimport Avatar from '@material-ui/core/Avatar';\nimport ImageSearchIcon from '@material-ui/icons/ImageSearch';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport DeleteIcon from '@material-ui/icons/Delete';\n\nconst useStyles = makeStyles((theme) => ({\n    appBar: {\n        position: 'relative',\n        backgroundColor: \"#7d8690\",\n    },\n    appBarBottom: {\n        top: 'auto',\n        bottom: 0,\n        backgroundColor: 'white',\n        padding: 15,\n    },\n    title: {\n        // marginLeft: theme.spacing(2),\n        flex: 1,\n    },\n    input: {\n        display: 'none',\n    },\n}));\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function DialogListOrder() {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const control = useSelector(state => state.control);\n    const order = useSelector(state => state.order);\n\n    const handleClose = () => {\n        dispatch({ type: \"CONTROL_OPEN_DIALOG_LIST_ORDER\", payload: !control.openDialogListOrder })\n    };\n\n\n    const DeleteItem = (prop, key) => (event) => {\n        console.log(prop, key);\n        delete order.storage[key];\n        dispatch({ type: \"ORDER_STORAGE\", payload: order.storage })\n        dispatch({ type: \"ORDER_LENGTH\", payload: order.storage.length }) \n        console.log(order.length);\n    }\n\n    return (\n\n        <Dialog fullScreen open={control.openDialogListOrder} onClose={handleClose} TransitionComponent={Transition}>\n            <AppBar className={classes.appBar}>\n                <Toolbar>\n\n                    <Typography variant=\"h6\" className={classes.title}>\n                        {\"ตระกร้า\"}\n                    </Typography>\n                    <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\n                        <CloseIcon />\n                    </IconButton>\n                </Toolbar>\n            </AppBar>\n            {order.storage.map((data, key) => (\n                <React.Fragment key={key}>\n\n                    <ListItem alignItems=\"flex-start\">\n                        <Divider></Divider>\n                        <ListItemAvatar>\n                            <Avatar variant=\"rounded\" alt=\"Remy Sharp\" src={data.image} style={{\n                                width: 65,\n                                height: 65\n                            }} />\n                        </ListItemAvatar>\n                        <ListItem button >\n                            <ListItemText\n                                primary={data.productId}\n                                secondary={\n                                    <React.Fragment>\n                                        <Typography\n                                            component=\"span\"\n                                            variant=\"body2\"\n                                            className={classes.inline}\n                                            color=\"textPrimary\"\n                                        >\n                                            {data.name}\n                                        </Typography>\n                                        {\" — \" + data.price}\n                                    </React.Fragment>\n                                }\n                            />\n                        </ListItem>\n                        <IconButton aria-label=\"delete\" onClick={DeleteItem(data, key)}>\n                            <DeleteIcon />\n                        </IconButton>\n                    </ListItem>\n                    <Divider variant=\"inset\" component=\"li\" />\n                </React.Fragment>\n            ))}\n        </Dialog>\n    );\n}\n","/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/components/DialogUpdateProduct/index.js",["190","191","192"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport Grid from '@material-ui/core/Grid';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Slide from '@material-ui/core/Slide';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport NumberPhoneInput from '../NumberPhoneInput';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText'\nimport Divider from '@material-ui/core/Divider';\nimport InputBase from '@material-ui/core/InputBase';\nimport { fireStore } from '../../firebase.config'\nimport DialogDeleteProduct from \"../DialogDeleteProduct\";\nimport Avatar from '@material-ui/core/Avatar';\nimport ImageSearchIcon from '@material-ui/icons/ImageSearch';\n\nconst useStyles = makeStyles((theme) => ({\n    appBar: {\n        position: 'relative',\n        backgroundColor: \"#7d8690\",\n    },\n    appBarBottom: {\n        top: 'auto',\n        bottom: 0,\n        backgroundColor: 'white',\n        padding: 15,\n    },\n    title: {\n        // marginLeft: theme.spacing(2),\n        flex: 1,\n    },\n    input: {\n        display: 'none',\n    },\n}));\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function DialogUpdateProduct() {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const control = useSelector(state => state.control);\n    const product = useSelector(state => state.product);\n    const user = useSelector(state => state.user);\n\n    const appRef = fireStore.collection(\"line_apps\");\n\n    const handleClose = () => {\n        dispatch({ type: \"CONTROL_OPEN_DIALOG_UPDATE_PRODUCT\", payload: !control.openDialogUpdateProduct })\n    };\n\n    const handleChange = (prop) => (event) => {\n        switch (prop) {\n            case \"name\":\n                dispatch({ type: \"PRODUCT_UPDATE_NAME\", payload: event.target.value })\n                break;\n            case \"price\":\n                dispatch({ type: \"PRODUCT_UPDATE_PRICE\", payload: event.target.value })\n                break;\n            case \"image\":\n                // console.log(event.target.files[0]);\n                var reader = new FileReader();\n                var baseString;\n                reader.onloadend = function () {\n                    baseString = reader.result;\n                    console.log(baseString);\n                    dispatch({ type: \"PRODUCT_UPDATE_IMAGE\", payload: baseString })\n                };\n                reader.readAsDataURL(event.target.files[0]);\n\n                break;\n            case \"productId\":\n                dispatch({ type: \"PRODUCT_UPDATE_PRUDUCT_ID\", payload: event.target.value })\n                break;\n            default:\n                break;\n        }\n\n    };\n\n    async function Add() {\n        const productRef = appRef.doc(sessionStorage.getItem(\"liff_id\")).collection(\"users\").doc(user.userId).collection(\"products\").doc(product.updateId);\n        await productRef.set({\n            id: product.updateId,\n            name: product.updateName,\n            productId: product.updateProductId,\n            price: product.updatePrice,\n            image: product.updateImage\n        }).then(function () {\n            product.storage[product.updateNumber].name = product.updateName;\n            product.storage[product.updateNumber].productId = product.updateProductId;\n            product.storage[product.updateNumber].price = product.updatePrice;\n            product.storage[product.updateNumber].image = product.updateImage;\n            dispatch({ type: \"PRODUCT_STORAGE\", payload: product.storage });\n            dispatch({ type: \"CONTROL_OPEN_DIALOG_UPDATE_PRODUCT\", payload: !control.openDialogUpdateProduct })\n\n        });\n    }\n\n    function Delete() {\n        dispatch({ type: \"CONTROL_OPEN_DIALOG_DELETE_PRODUCT\", payload: !control.openDialogDeleteProduct })\n    }\n\n    return (\n\n        <Dialog fullScreen open={control.openDialogUpdateProduct} onClose={handleClose} TransitionComponent={Transition}>\n            <AppBar className={classes.appBar}>\n                <Toolbar>\n\n                    <Typography variant=\"h6\" className={classes.title}>\n                        {\"แก้ไขสินค้า\"}\n                    </Typography>\n                    <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\n                        <CloseIcon />\n                    </IconButton>\n                </Toolbar>\n            </AppBar>\n            <React.Fragment>\n                <ListItem button>\n                    <ListItemText\n                        primary={<Typography\n                            component=\"span\"\n                            variant=\"body2\"\n                            // className={classes.inline}\n                            color=\"textPrimary\"\n                        >\n                            {\"รหัสสินค้า\"}\n                        </Typography>}\n                        secondary={\n                            <React.Fragment>\n                                <InputBase\n                                    defaultValue={product.updateProductId}\n                                    placeholder=\"โปรดกรอกรหัสสินค้า\"\n                                    style={{ width: '100%' }}\n                                    onChange={handleChange(\"productId\")}></InputBase>\n                            </React.Fragment>\n                        }\n                    />\n                </ListItem>\n                <Divider></Divider>\n            </React.Fragment>\n            <React.Fragment>\n                <ListItem button>\n                    <ListItemText\n                        primary={<Typography\n                            component=\"span\"\n                            variant=\"body2\"\n                            // className={classes.inline}\n                            color=\"textPrimary\"\n                        >\n                            {\"ชื่อสินค้า\"}\n                        </Typography>}\n                        secondary={\n                            <React.Fragment>\n                                <InputBase\n                                    defaultValue={product.updateName}\n                                    placeholder=\"โปรดกรอกชื่อสินค้า\"\n                                    style={{ width: '100%' }}\n                                    onChange={handleChange(\"name\")}></InputBase>\n                            </React.Fragment>\n                        }\n                    />\n                </ListItem>\n                <Divider></Divider>\n            </React.Fragment>\n            <React.Fragment>\n                <ListItem button>\n                    <ListItemText\n                        primary={<Typography\n                            component=\"span\"\n                            variant=\"body2\"\n                            // className={classes.inline}\n                            color=\"textPrimary\"\n                        >\n                            {\"ราคาสินค้า\"}\n                        </Typography>}\n                        secondary={\n                            <React.Fragment>\n                                <InputBase\n                                    defaultValue={product.updatePrice}\n                                    placeholder=\"โปรดกรอกราคาสินค้า\"\n                                    style={{ width: '100%' }}\n                                    onChange={handleChange(\"price\")}></InputBase>\n                            </React.Fragment>\n                        }\n                    />\n                </ListItem>\n                <Divider></Divider>\n            </React.Fragment>\n            <React.Fragment>\n                <ListItem button>\n                    <ListItemText\n                        primary={<Typography\n                            component=\"span\"\n                            variant=\"body2\"\n                            // className={classes.inline}\n                            color=\"textPrimary\"\n                        >\n                            {\"รูปสินค้า\"}\n                        </Typography>}\n                        secondary={\n                            <React.Fragment>\n                                <input accept=\"image/*\" className={classes.input} id=\"icon-button-file\" type=\"file\" onChange={handleChange(\"image\")} />\n                                <label htmlFor=\"icon-button-file\">\n                                    <Grid\n                                        container\n                                        direction=\"row\"\n                                        justify=\"center\"\n                                        alignItems=\"center\"\n                                    >\n                                        <Avatar variant=\"rounded\" alt=\"+\" style={{ width: 150, height: 150 }} >\n                                            {product.updateImage ? (<React.Fragment>\n                                                <Avatar variant=\"rounded\" alt=\"+\" src={product.updateImage} style={{ width: 150, height: 150 }} />\n                                            </React.Fragment>) : (<React.Fragment>\n                                                <ImageSearchIcon style={{\n                                                    fontSize: 80\n                                                }}></ImageSearchIcon>\n                                            </React.Fragment>)}\n\n                                        </Avatar>\n                                    </Grid>\n                                </label>\n                            </React.Fragment>\n                        }\n                    />\n                </ListItem>\n                <Divider></Divider>\n            </React.Fragment>\n\n            <AppBar position=\"fixed\" color=\"primary\" className={classes.appBarBottom}>\n                <Grid\n                    container\n                    direction=\"row\"\n                    justify=\"center\"\n                    alignItems=\"center\"\n                    spacing={2}\n                >\n                    <Grid item xs={8}>\n                        <Button\n                            variant=\"contained\"\n                            style={{\n                                fontSize: '1em',\n                                backgroundColor: \"#00b900\",\n                                color: \"#fff\",\n                                fontWeight: \"bold\",\n                                width: '100%'\n                            }} onClick={Add}>\n                            {\"บันทึก\"}\n                        </Button>\n                    </Grid>\n                    <Grid item xs={4} >\n                        <Button\n                            variant=\"contained\"\n                            style={{\n                                fontSize: '1em',\n                                backgroundColor: \"#f44336\",\n                                color: \"#fff\",\n                                fontWeight: \"bold\",\n                                width: '100%'\n                            }} onClick={Delete}>\n                            {\"ลบ\"}\n                        </Button>\n                    </Grid>\n                </Grid>\n            </AppBar>\n            <DialogDeleteProduct></DialogDeleteProduct>\n        </Dialog>\n    );\n}\n","/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/components/DialogBuyProduct/index.js",["193","194","195","196","197","198","199","200","201"],"import React from 'react';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport Grid from '@material-ui/core/Grid';\nimport Dialog from '@material-ui/core/Dialog';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport CloseIcon from '@material-ui/icons/Close';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Slide from '@material-ui/core/Slide';\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport NumberPhoneInput from '../NumberPhoneInput';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText'\nimport Divider from '@material-ui/core/Divider';\nimport InputBase from '@material-ui/core/InputBase';\nimport { fireStore } from '../../firebase.config'\nimport queryString from \"query-string\";\nimport Avatar from '@material-ui/core/Avatar';\nimport ImageSearchIcon from '@material-ui/icons/ImageSearch';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport ListSubheader from '@material-ui/core/ListSubheader';\n\nconst useStyles = makeStyles((theme) => ({\n    appBar: {\n        position: 'relative',\n        backgroundColor: \"#7d8690\",\n    },\n    appBarBottom: {\n        top: 'auto',\n        bottom: 0,\n        backgroundColor: 'white',\n        padding: 15,\n    },\n    title: {\n        // marginLeft: theme.spacing(2),\n        flex: 1,\n    },\n    input: {\n        display: 'none',\n    },\n}));\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\n\n\nfunction DialogBuyProduct() {\n    const order = useSelector(state => state.order)\n    const control = useSelector(state => state.control)\n    const user = useSelector(state => state.user)\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const appRef = fireStore.collection(\"line_apps\");\n    const handleClose = () => {\n        dispatch({ type: \"CONTROL_OPEN_DIALOG_SUM_ORDER\", payload: !control.openDialogSumOrder })\n    };\n\n    async function Buy() {\n        const orderRef = appRef.doc(sessionStorage.getItem(\"liff_id\")).collection(\"orders\").doc();\n        await orderRef.set({\n            id: orderRef.id,\n            product: order.storage,\n            user: user,\n            address: order.address\n        }).then(function () {\n\n\n            dispatch({ type: \"CONTROL_OPEN_DIALOG_SUM_ORDER\", payload: !control.openDialogSumOrder })\n            dispatch({ type: \"ORDER_ADDRESS\", payload: null })\n            dispatch({ type: \"ORDER_STORAGE\", payload: [] })\n\n\n\n\n        });\n\n    }\n\n    function amount(item) {\n        return parseInt(item.price);\n    }\n\n    function sum(prev, next) {\n        return prev + next;\n    }\n    React.useEffect(() => {\n        console.log(order.storage.length);\n\n    })\n\n\n    return (\n\n        <Dialog fullScreen open={control.openDialogSumOrder} onClose={handleClose} TransitionComponent={Transition}>\n            <AppBar position=\"fixed\" className={classes.appBar}>\n                <Toolbar>\n\n                    <Typography variant=\"h6\" className={classes.title}>\n                        {\"สรุปยอดสินค้า\"}\n                    </Typography>\n                    <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\n                        <CloseIcon />\n                    </IconButton>\n                </Toolbar>\n            </AppBar>\n            <div style={{\n                paddingBottom: 150\n            }}>\n                {order.storage.map((data, key) => (\n                    <React.Fragment key={key}>\n\n                        <ListItem alignItems=\"flex-start\">\n                            <Divider></Divider>\n\n                            <ListItem  >\n                                <ListItemText\n                                    primary={key + 1}\n\n                                />\n                            </ListItem>\n                            <ListItem  >\n                                <ListItemText\n                                    primary={data.name}\n\n                                />\n                            </ListItem>\n                            <ListItem  >\n                                <ListItemText\n                                    primary={data.price + \" บาท\"}\n\n                                />\n                            </ListItem>\n                        </ListItem>\n                        <Divider />\n                    </React.Fragment>\n                ))}\n                <ListItem alignItems=\"flex-start\">\n                    <ListItem  >\n                        <ListItemText\n                            primary={\"รวม\"}\n\n                        />\n                    </ListItem>\n                    <ListItem  >\n                        <ListItemText\n                            primary={order.storage.length === 0 ? 0 : order.storage.map(amount).reduce(sum) + \" บาท\"}\n\n                        />\n                    </ListItem>\n                </ListItem>\n                <Divider />\n                <List\n                    component=\"nav\"\n                    aria-labelledby=\"nested-list-subheader\"\n                    subheader={\n                        <ListSubheader component=\"div\" id=\"nested-list-subheader\" style={{ backgroundColor: \"white\" }}>\n                            {\"ที่อยู่จัดส่ง\"}\n                        </ListSubheader>\n                    }\n                    className={classes.root}\n                >\n                    {order.address ? (<ListItem button >\n                        <ListItemText\n                            primary={order.address.name}\n                            secondary={\n                                <React.Fragment>\n                                    <Typography\n                                        component=\"span\"\n                                        variant=\"body2\"\n                                        className={classes.inline}\n                                        color=\"textPrimary\"\n                                    >\n                                        {order.address.numberPhone}\n                                    </Typography>\n                                    {\" — \" + order.address.address}\n                                </React.Fragment>\n                            }\n                        />\n                    </ListItem>\n                    ) : (<React.Fragment></React.Fragment>)}\n\n                </List>\n            </div>\n            <AppBar position=\"fixed\" color=\"primary\" className={classes.appBarBottom}>\n                <Button variant=\"contained\" style={{ fontSize: '1em', backgroundColor: \"#00b900\", color: \"#fff\", fontWeight: \"bold\" }} onClick={Buy}>\n                    {\"สั่งเลย\"}\n                </Button>\n            </AppBar>\n        </Dialog>\n    );\n}\n\nexport default DialogBuyProduct","/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/components/DialogSelectAddress/index.js",["202","203","204","205","206","207","208"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\nimport Grid from '@material-ui/core/Grid';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Slide from '@material-ui/core/Slide';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport NumberPhoneInput from '../NumberPhoneInput';\nimport Snackbar from '@material-ui/core/Snackbar';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText'\nimport Divider from '@material-ui/core/Divider';\nimport InputBase from '@material-ui/core/InputBase';\nimport { fireStore } from '../../firebase.config'\nimport queryString from \"query-string\";\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport DialogBuyProduct from '../DialogBuyProduct'\n\nconst useStyles = makeStyles((theme) => ({\n    appBar: {\n        position: 'relative',\n        backgroundColor: \"#7d8690\",\n    },\n    appBarBottom: {\n        top: 'auto',\n        bottom: 0,\n        backgroundColor: 'white',\n        padding: 15,\n    },\n    title: {\n        // marginLeft: theme.spacing(2),\n        flex: 1,\n    },\n}));\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function DialogSelectAddress() {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const control = useSelector(state => state.control);\n    const address = useSelector(state => state.address);\n    const user = useSelector(state => state.user);\n    const [selectedIndex, setSelectedIndex] = React.useState(1);\n    const appRef = fireStore.collection(\"line_apps\");\n\n    const handleClose = () => {\n        dispatch({ type: \"CONTROL_OPEN_DIALOG_SELECT_ADDRESS\", payload: !control.openDialogSelectAddress })\n    };\n\n\n    async function Next() {\n        dispatch({ type: \"CONTROL_OPEN_DIALOG_SUM_ORDER\", payload: true })\n        dispatch({ type: \"CONTROL_OPEN_DIALOG_SELECT_ADDRESS\", payload: false })\n    }\n\n    const handleListItemClick = (event, index, data) => {\n        setSelectedIndex(index);\n        dispatch({ type: \"ORDER_ADDRESS\", payload: data })\n        console.log(index, data);\n    };\n\n    React.useEffect(() => {\n        const data = [];\n        appRef.doc(sessionStorage.getItem(\"liff_id\")).collection(\"users\").doc(user.userId).collection(\"address\").get().then(snapshot => {\n            snapshot.docs.forEach(hospital => {\n                data.push(hospital.data())\n            });\n            dispatch({ type: \"ADDRESS_STORAGE\", payload: data })\n            dispatch({ type: \"AUTH_FIST_PATH\", payload: sessionStorage.getItem(\"fist_path\") })\n            dispatch({ type: \"AUTH_LIFF_ID\", payload: sessionStorage.getItem(\"liff_id\") })\n        })\n    }, [])\n\n    return (\n\n        <Dialog fullScreen open={control.openDialogSelectAddress} onClose={handleClose} TransitionComponent={Transition}>\n            <AppBar className={classes.appBar}>\n                <Toolbar>\n\n                    <Typography variant=\"h6\" className={classes.title}>\n                        {\"เลือกที่อยู่จัดส่ง\"}\n                    </Typography>\n                    <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\n                        <CloseIcon />\n                    </IconButton>\n                </Toolbar>\n            </AppBar>\n\n            <List\n                component=\"nav\"\n                aria-labelledby=\"nested-list-subheader\"\n                subheader={\n                    <ListSubheader component=\"div\" id=\"nested-list-subheader\" style={{ backgroundColor: \"white\" }}>\n                        {\"ที่อยู่จัดส่ง\"}\n                    </ListSubheader>\n                }\n                className={classes.root}\n            >\n                {address.storage.map((data, key) => (\n                    <React.Fragment key={key}>\n                        <Divider></Divider>\n                        <ListItem selected={selectedIndex === key} button onClick={(event) => handleListItemClick(event, key, data)}>\n                            <ListItemText\n                                primary={data.name}\n                                secondary={\n                                    <React.Fragment>\n                                        <Typography\n                                            component=\"span\"\n                                            variant=\"body2\"\n                                            className={classes.inline}\n                                            color=\"textPrimary\"\n                                        >\n                                            {data.numberPhone}\n                                        </Typography>\n                                        {\" — \" + data.address}\n                                    </React.Fragment>\n                                }\n                            />\n                        </ListItem>\n                    </React.Fragment>\n                ))}\n\n            </List>\n\n            <AppBar position=\"fixed\" color=\"primary\" className={classes.appBarBottom}>\n                <Button variant=\"contained\" style={{ fontSize: '1em', backgroundColor: \"#00b900\", color: \"#fff\", fontWeight: \"bold\" }} onClick={Next}>\n                    {\"เลือกที่จัดส่ง\"}\n                </Button>\n            </AppBar>\n       \n        </Dialog>\n    );\n}\n","/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/components/NumberPhoneInput/index.js",["209"],"import {\n    fade,\n    withStyles\n} from '@material-ui/core/styles';\n\nimport InputBase from '@material-ui/core/InputBase';\n\nconst NumberPhoneInput = withStyles((theme) => ({\n    // root: {\n    //     'label + &': {\n    //         marginTop: theme.spacing(3),\n    //     },\n    // },\n    input: {\n        color: '#00b900',\n        fontWeight: 'bold',\n        borderRadius: 4,\n        position: 'relative',\n        backgroundColor: theme.palette.common.white,\n        //   border: '1px solid #ced4da',\n        textAlign: 'center',\n        fontSize: 30,\n        width: 'auto',\n        padding: '10px 12px',\n        //   transition: theme.transitions.create(['border-color', 'box-shadow']),\n        // Use the system font instead of the default Roboto font.\n        fontFamily: [\n            'Roboto','Meiryo','-apple-system','system-ui','BlinkMacSystemFont','Segoe UI','Helvetica Neue','Segoe UI Emoji','Segoe UI Symbol','Apple Color Emoji','Noto Color Emoji','Noto Emoji','sans-serif','Arial',\n        ].join(','),\n        //   '&:focus': {\n        //     boxShadow: `${fade(theme.palette.primary.main, 0.25)} 0 0 0 0.2rem`,\n        //     borderColor: theme.palette.primary.main,\n        //   },\n    },\n}))(InputBase);\n\nexport default NumberPhoneInput","/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/components/DialogChangNumberPhone/index.js",[],"/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/components/DialogDeleteProduct/index.js",[],"/Users/n.devs/Documents/GitHub/blackboard-th/free-storefront-line/src/components/DialogDeleteAddress/index.js",[],{"ruleId":"210","replacedBy":"211"},{"ruleId":"212","replacedBy":"213"},{"ruleId":"214","severity":1,"message":"215","line":3,"column":8,"nodeType":"216","messageId":"217","endLine":3,"endColumn":12},{"ruleId":"218","severity":1,"message":"219","line":88,"column":6,"nodeType":"220","endLine":88,"endColumn":8,"suggestions":"221"},{"ruleId":"214","severity":1,"message":"222","line":5,"column":8,"nodeType":"216","messageId":"217","endLine":5,"endColumn":12},{"ruleId":"214","severity":1,"message":"223","line":6,"column":8,"nodeType":"216","messageId":"217","endLine":6,"endColumn":14},{"ruleId":"214","severity":1,"message":"224","line":13,"column":8,"nodeType":"216","messageId":"217","endLine":13,"endColumn":16},{"ruleId":"214","severity":1,"message":"225","line":43,"column":10,"nodeType":"216","messageId":"217","endLine":43,"endColumn":24},{"ruleId":"214","severity":1,"message":"226","line":47,"column":10,"nodeType":"216","messageId":"217","endLine":47,"endColumn":15},{"ruleId":"214","severity":1,"message":"227","line":54,"column":11,"nodeType":"216","messageId":"217","endLine":54,"endColumn":17},{"ruleId":"214","severity":1,"message":"228","line":74,"column":14,"nodeType":"216","messageId":"217","endLine":74,"endColumn":25},{"ruleId":"218","severity":1,"message":"229","line":88,"column":8,"nodeType":"220","endLine":88,"endColumn":10,"suggestions":"230"},{"ruleId":"214","severity":1,"message":"231","line":4,"column":22,"nodeType":"216","messageId":"217","endLine":4,"endColumn":30},{"ruleId":"214","severity":1,"message":"232","line":9,"column":12,"nodeType":"216","messageId":"217","endLine":9,"endColumn":19},{"ruleId":"218","severity":1,"message":"233","line":70,"column":8,"nodeType":"220","endLine":70,"endColumn":10,"suggestions":"234"},{"ruleId":"214","severity":1,"message":"235","line":11,"column":8,"nodeType":"216","messageId":"217","endLine":11,"endColumn":24},{"ruleId":"214","severity":1,"message":"236","line":12,"column":8,"nodeType":"216","messageId":"217","endLine":12,"endColumn":27},{"ruleId":"214","severity":1,"message":"237","line":16,"column":8,"nodeType":"216","messageId":"217","endLine":16,"endColumn":16},{"ruleId":"214","severity":1,"message":"238","line":17,"column":10,"nodeType":"216","messageId":"217","endLine":17,"endColumn":20},{"ruleId":"214","severity":1,"message":"239","line":73,"column":12,"nodeType":"216","messageId":"217","endLine":73,"endColumn":20},{"ruleId":"214","severity":1,"message":"240","line":85,"column":11,"nodeType":"216","messageId":"217","endLine":85,"endColumn":34},{"ruleId":"218","severity":1,"message":"229","line":119,"column":8,"nodeType":"220","endLine":119,"endColumn":23,"suggestions":"241"},{"ruleId":"214","severity":1,"message":"222","line":5,"column":8,"nodeType":"216","messageId":"217","endLine":5,"endColumn":12},{"ruleId":"218","severity":1,"message":"229","line":82,"column":8,"nodeType":"220","endLine":82,"endColumn":10,"suggestions":"242"},{"ruleId":"218","severity":1,"message":"243","line":85,"column":8,"nodeType":"220","endLine":85,"endColumn":34,"suggestions":"244"},{"ruleId":"245","severity":1,"message":"246","line":162,"column":28,"nodeType":"247","messageId":"248","endLine":162,"endColumn":29},{"ruleId":"218","severity":1,"message":"233","line":117,"column":8,"nodeType":"220","endLine":117,"endColumn":21,"suggestions":"249"},{"ruleId":"214","severity":1,"message":"250","line":5,"column":8,"nodeType":"216","messageId":"217","endLine":5,"endColumn":12},{"ruleId":"214","severity":1,"message":"251","line":14,"column":8,"nodeType":"216","messageId":"217","endLine":14,"endColumn":24},{"ruleId":"214","severity":1,"message":"224","line":15,"column":8,"nodeType":"216","messageId":"217","endLine":15,"endColumn":16},{"ruleId":"214","severity":1,"message":"250","line":5,"column":8,"nodeType":"216","messageId":"217","endLine":5,"endColumn":12},{"ruleId":"214","severity":1,"message":"222","line":6,"column":8,"nodeType":"216","messageId":"217","endLine":6,"endColumn":12},{"ruleId":"214","severity":1,"message":"251","line":14,"column":8,"nodeType":"216","messageId":"217","endLine":14,"endColumn":24},{"ruleId":"214","severity":1,"message":"224","line":15,"column":8,"nodeType":"216","messageId":"217","endLine":15,"endColumn":16},{"ruleId":"214","severity":1,"message":"227","line":51,"column":11,"nodeType":"216","messageId":"217","endLine":51,"endColumn":17},{"ruleId":"214","severity":1,"message":"250","line":5,"column":8,"nodeType":"216","messageId":"217","endLine":5,"endColumn":12},{"ruleId":"214","severity":1,"message":"251","line":14,"column":8,"nodeType":"216","messageId":"217","endLine":14,"endColumn":24},{"ruleId":"214","severity":1,"message":"224","line":15,"column":8,"nodeType":"216","messageId":"217","endLine":15,"endColumn":16},{"ruleId":"214","severity":1,"message":"227","line":56,"column":11,"nodeType":"216","messageId":"217","endLine":56,"endColumn":17},{"ruleId":"214","severity":1,"message":"252","line":4,"column":8,"nodeType":"216","messageId":"217","endLine":4,"endColumn":14},{"ruleId":"214","severity":1,"message":"250","line":5,"column":8,"nodeType":"216","messageId":"217","endLine":5,"endColumn":12},{"ruleId":"214","severity":1,"message":"222","line":6,"column":8,"nodeType":"216","messageId":"217","endLine":6,"endColumn":12},{"ruleId":"214","severity":1,"message":"251","line":14,"column":8,"nodeType":"216","messageId":"217","endLine":14,"endColumn":24},{"ruleId":"214","severity":1,"message":"224","line":15,"column":8,"nodeType":"216","messageId":"217","endLine":15,"endColumn":16},{"ruleId":"214","severity":1,"message":"253","line":19,"column":8,"nodeType":"216","messageId":"217","endLine":19,"endColumn":17},{"ruleId":"214","severity":1,"message":"254","line":20,"column":10,"nodeType":"216","messageId":"217","endLine":20,"endColumn":19},{"ruleId":"214","severity":1,"message":"255","line":21,"column":8,"nodeType":"216","messageId":"217","endLine":21,"endColumn":19},{"ruleId":"214","severity":1,"message":"256","line":23,"column":8,"nodeType":"216","messageId":"217","endLine":23,"endColumn":23},{"ruleId":"214","severity":1,"message":"250","line":5,"column":8,"nodeType":"216","messageId":"217","endLine":5,"endColumn":12},{"ruleId":"214","severity":1,"message":"251","line":14,"column":8,"nodeType":"216","messageId":"217","endLine":14,"endColumn":24},{"ruleId":"214","severity":1,"message":"224","line":15,"column":8,"nodeType":"216","messageId":"217","endLine":15,"endColumn":16},{"ruleId":"214","severity":1,"message":"222","line":3,"column":8,"nodeType":"216","messageId":"217","endLine":3,"endColumn":12},{"ruleId":"214","severity":1,"message":"251","line":14,"column":8,"nodeType":"216","messageId":"217","endLine":14,"endColumn":24},{"ruleId":"214","severity":1,"message":"224","line":15,"column":8,"nodeType":"216","messageId":"217","endLine":15,"endColumn":16},{"ruleId":"214","severity":1,"message":"253","line":19,"column":8,"nodeType":"216","messageId":"217","endLine":19,"endColumn":17},{"ruleId":"214","severity":1,"message":"255","line":21,"column":8,"nodeType":"216","messageId":"217","endLine":21,"endColumn":19},{"ruleId":"214","severity":1,"message":"223","line":22,"column":8,"nodeType":"216","messageId":"217","endLine":22,"endColumn":14},{"ruleId":"214","severity":1,"message":"256","line":23,"column":8,"nodeType":"216","messageId":"217","endLine":23,"endColumn":23},{"ruleId":"214","severity":1,"message":"257","line":24,"column":8,"nodeType":"216","messageId":"217","endLine":24,"endColumn":22},{"ruleId":"214","severity":1,"message":"258","line":25,"column":8,"nodeType":"216","messageId":"217","endLine":25,"endColumn":18},{"ruleId":"214","severity":1,"message":"222","line":6,"column":8,"nodeType":"216","messageId":"217","endLine":6,"endColumn":12},{"ruleId":"214","severity":1,"message":"251","line":14,"column":8,"nodeType":"216","messageId":"217","endLine":14,"endColumn":24},{"ruleId":"214","severity":1,"message":"224","line":15,"column":8,"nodeType":"216","messageId":"217","endLine":15,"endColumn":16},{"ruleId":"214","severity":1,"message":"253","line":19,"column":8,"nodeType":"216","messageId":"217","endLine":19,"endColumn":17},{"ruleId":"214","severity":1,"message":"255","line":21,"column":8,"nodeType":"216","messageId":"217","endLine":21,"endColumn":19},{"ruleId":"214","severity":1,"message":"259","line":23,"column":8,"nodeType":"216","messageId":"217","endLine":23,"endColumn":24},{"ruleId":"218","severity":1,"message":"229","line":81,"column":8,"nodeType":"220","endLine":81,"endColumn":10,"suggestions":"260"},{"ruleId":"214","severity":1,"message":"261","line":2,"column":5,"nodeType":"216","messageId":"217","endLine":2,"endColumn":9},"no-native-reassign",["262"],"no-negated-in-lhs",["263"],"no-unused-vars","'liff' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'auth.status', 'dispatch', and 'parsed.liff_id'. Either include them or remove the dependency array.","ArrayExpression",["264"],"'Grid' is defined but never used.","'Avatar' is defined but never used.","'Snackbar' is defined but never used.","'TransitionDown' is defined but never used.","'Alert' is defined but never used.","'parsed' is assigned a value but never used.","'handleClose' is defined but never used.","React Hook React.useEffect has missing dependencies: 'appRef', 'dispatch', and 'user.userId'. Either include them or remove the dependency array.",["265"],"'Redirect' is defined but never used.","'loading' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'dispatch' and 'parsed.liff_id'. Either include them or remove the dependency array.",["266"],"'DialogAddProduct' is defined but never used.","'DialogUpdateProduct' is defined but never used.","'ListItem' is defined but never used.","'ButtonBase' is defined but never used.","'onLength' is assigned a value but never used.","'openDialogUpdateProduct' is assigned a value but never used.",["267"],["268"],"React Hook React.useEffect has missing dependencies: 'dispatch' and 'parsed.liff_id'. Either include them or remove the dependency array. Outer scope values like 'window.location.pathname' aren't valid dependencies because mutating them doesn't re-render the component.",["269"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat",["270"],"'List' is defined but never used.","'NumberPhoneInput' is defined but never used.","'Button' is defined but never used.","'InputBase' is defined but never used.","'fireStore' is defined but never used.","'queryString' is defined but never used.","'ImageSearchIcon' is defined but never used.","'ListItemAvatar' is defined but never used.","'DeleteIcon' is defined but never used.","'DialogBuyProduct' is defined but never used.",["271"],"'fade' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"272","fix":"273"},{"desc":"274","fix":"275"},{"desc":"276","fix":"277"},{"desc":"278","fix":"279"},{"desc":"274","fix":"280"},{"desc":"276","fix":"281"},{"desc":"272","fix":"282"},{"desc":"274","fix":"283"},"Update the dependencies array to be: [auth.status, dispatch, parsed.liff_id]",{"range":"284","text":"285"},"Update the dependencies array to be: [appRef, dispatch, user.userId]",{"range":"286","text":"287"},"Update the dependencies array to be: [dispatch, parsed.liff_id]",{"range":"288","text":"289"},"Update the dependencies array to be: [appRef, dispatch, order.storage, user.userId]",{"range":"290","text":"291"},{"range":"292","text":"287"},{"range":"293","text":"289"},{"range":"294","text":"285"},{"range":"295","text":"287"},[2470,2472],"[auth.status, dispatch, parsed.liff_id]",[3376,3378],"[appRef, dispatch, user.userId]",[3436,3438],"[dispatch, parsed.liff_id]",[4425,4440],"[appRef, dispatch, order.storage, user.userId]",[3178,3180],[2832,2858],[5012,5025],[3106,3108]]