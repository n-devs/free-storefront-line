[{"/Users/n.devs/Desktop/develop/line-login-react/src/reducers/rootReducer.js":"1","/Users/n.devs/Desktop/develop/line-login-react/src/views/SettingView/index.js":"2","/Users/n.devs/Desktop/develop/line-login-react/src/components/DialogChangNumberPhone/index.js":"3","/Users/n.devs/Desktop/develop/line-login-react/src/App.js":"4","/Users/n.devs/Desktop/develop/line-login-react/src/reducers/userReducer.js":"5","/Users/n.devs/Desktop/develop/line-login-react/src/views/NotFoundLIFFIDView/index.js":"6","/Users/n.devs/Desktop/develop/line-login-react/src/reducers/authReducer.js":"7","/Users/n.devs/Desktop/develop/line-login-react/src/views/LiffRedirectUriView/index.js":"8","/Users/n.devs/Desktop/develop/line-login-react/src/views/SetupView/index.js":"9","/Users/n.devs/Desktop/develop/line-login-react/src/index.js":"10","/Users/n.devs/Desktop/develop/line-login-react/src/reducers/todoReducer.js":"11","/Users/n.devs/Desktop/develop/line-login-react/src/components/Loading/index.js":"12","/Users/n.devs/Desktop/develop/line-login-react/src/views/AddressView/index.js":"13","/Users/n.devs/Desktop/develop/line-login-react/src/reducers/controlReducer.js":"14","/Users/n.devs/Desktop/develop/line-login-react/src/components/DialogAddAddress/index.js":"15","/Users/n.devs/Desktop/develop/line-login-react/src/reducers/addressReducer.js":"16","/Users/n.devs/Desktop/develop/line-login-react/src/components/DialogUpdateAddress/index.js":"17","/Users/n.devs/Desktop/develop/line-login-react/src/components/DialogDeleteAddress/index.js":"18","/Users/n.devs/Desktop/develop/line-login-react/src/views/AddProductView/index.js":"19","/Users/n.devs/Desktop/develop/line-login-react/src/reducers/productReducer.js":"20","/Users/n.devs/Desktop/develop/line-login-react/src/components/DialogAddProduct/index.js":"21","/Users/n.devs/Desktop/develop/line-login-react/src/components/DialogUpdateProduct/index.js":"22","/Users/n.devs/Desktop/develop/line-login-react/src/components/DialogDeleteProduct/index.js":"23","/Users/n.devs/Desktop/develop/line-login-react/src/views/ProductView/index.js":"24","/Users/n.devs/Desktop/develop/line-login-react/src/reducers/orderReducer.js":"25","/Users/n.devs/Desktop/develop/line-login-react/src/components/DialogListOrder/index.js":"26","/Users/n.devs/Desktop/develop/line-login-react/src/components/DialogSelectAddress/index.js":"27","/Users/n.devs/Desktop/develop/line-login-react/src/components/DialogBuyProduct/index.js":"28","/Users/n.devs/Desktop/develop/line-login-react/src/firebase.config.js":"29","/Users/n.devs/Desktop/develop/line-login-react/src/components/NumberPhoneInput/index.js":"30"},{"size":629,"mtime":1612039901600,"results":"31","hashOfConfig":"32"},{"size":7086,"mtime":1612117966744,"results":"33","hashOfConfig":"32"},{"size":3217,"mtime":1611960826557,"results":"34","hashOfConfig":"32"},{"size":4100,"mtime":1612117358831,"results":"35","hashOfConfig":"32"},{"size":899,"mtime":1612051333248,"results":"36","hashOfConfig":"32"},{"size":174,"mtime":1611947957921,"results":"37","hashOfConfig":"32"},{"size":692,"mtime":1611991693677,"results":"38","hashOfConfig":"32"},{"size":3580,"mtime":1612055980153,"results":"39","hashOfConfig":"32"},{"size":8931,"mtime":1612055766398,"results":"40","hashOfConfig":"32"},{"size":655,"mtime":1611940171038,"results":"41","hashOfConfig":"32"},{"size":767,"mtime":1611940063177,"results":"42","hashOfConfig":"32"},{"size":338,"mtime":1611936984428,"results":"43","hashOfConfig":"32"},{"size":5656,"mtime":1612056181487,"results":"44","hashOfConfig":"32"},{"size":2030,"mtime":1612046930661,"results":"45","hashOfConfig":"32"},{"size":7863,"mtime":1612056409645,"results":"46","hashOfConfig":"32"},{"size":1755,"mtime":1612030586329,"results":"47","hashOfConfig":"32"},{"size":9439,"mtime":1612055906504,"results":"48","hashOfConfig":"32"},{"size":3545,"mtime":1612036405840,"results":"49","hashOfConfig":"32"},{"size":5877,"mtime":1612115220843,"results":"50","hashOfConfig":"32"},{"size":2190,"mtime":1612034666772,"results":"51","hashOfConfig":"32"},{"size":10267,"mtime":1612115201650,"results":"52","hashOfConfig":"32"},{"size":11834,"mtime":1612115269973,"results":"53","hashOfConfig":"32"},{"size":4087,"mtime":1612115279865,"results":"54","hashOfConfig":"32"},{"size":6583,"mtime":1612115359449,"results":"55","hashOfConfig":"32"},{"size":750,"mtime":1612045035045,"results":"56","hashOfConfig":"32"},{"size":4794,"mtime":1612055875020,"results":"57","hashOfConfig":"32"},{"size":5807,"mtime":1612055894600,"results":"58","hashOfConfig":"32"},{"size":7187,"mtime":1612055846129,"results":"59","hashOfConfig":"32"},{"size":629,"mtime":1612056242353,"results":"60","hashOfConfig":"32"},{"size":1259,"mtime":1612118027730,"results":"61","hashOfConfig":"32"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},"zqtubk",{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"72"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"86"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"72"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"64"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"72"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"118","messages":"119","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"72"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127","usedDeprecatedRules":"64"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"86"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"132","messages":"133","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/n.devs/Desktop/develop/line-login-react/src/reducers/rootReducer.js",[],["134","135"],"/Users/n.devs/Desktop/develop/line-login-react/src/views/SettingView/index.js",["136","137"],"/Users/n.devs/Desktop/develop/line-login-react/src/components/DialogChangNumberPhone/index.js",[],"/Users/n.devs/Desktop/develop/line-login-react/src/App.js",["138","139","140"],"import React from \"react\";\nimport \"./App.css\";\n// import liff from \"@line/liff\";\nimport {\n  makeStyles\n} from \"@material-ui/core/styles\";\nimport Loading from \"./components/Loading\"\nimport { useSelector, useDispatch } from \"react-redux\";\nimport {\n  TransitionGroup,\n  CSSTransition\n} from \"react-transition-group\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\n// import { fireStore } from \"./firebase.config\"\nimport queryString from \"query-string\";\nimport NotFoundLIFFIDView from \"./views/NotFoundLIFFIDView\"\nimport SetupView from \"./views/SetupView\"\nimport SettingView from \"./views/SettingView\"\nimport LiffRedirectUriView from \"./views/LiffRedirectUriView\"\nimport AddressView from \"./views/AddressView\"\nimport AddProductView from \"./views/AddProductView\"\nimport ProductView from \"./views/ProductView\"\n\nconst useStyles = makeStyles((theme) => ({\n  avatars: {\n    width: theme.spacing(10),\n    height: theme.spacing(10),\n  },\n  appBar: {\n    top: \"auto\",\n    bottom: 0,\n    backgroundColor: \"white\",\n    padding: 15,\n  },\n  layout: {\n    padding: \"10px 0px\"\n  },\n  app: {\n    // height: 450\n  }\n}));\n\nfunction RunView(props) {\n  const auth = useSelector(state => state.auth);\n  const parsed = queryString.parse(window.location.search);\n  console.log(auth.liff_id);\n  return (\n    <React.Fragment>\n      {auth.liff_id ? (<React.Fragment>\n        {auth.status ? (\n          <React.Fragment>\n            {props.children}\n          </React.Fragment>\n        ) : (\n            <React.Fragment>\n              <Redirect to={`/setup?liff_id=${parsed.liff_id}&pathname=${window.location.pathname}`} />\n            </React.Fragment>\n          )}\n      </React.Fragment>) : (<NotFoundLIFFIDView></NotFoundLIFFIDView>)}\n\n    </React.Fragment>\n  )\n}\n\nfunction App() {\n  const [loading, setLoading] = React.useState(true);\n  const classes = useStyles();\n  const dispatch = useDispatch();\n  const parsed = queryString.parse(window.location.search);\n  const auth = useSelector(state => state.auth);\n\n  React.useEffect(() => {\n    if (parsed.liff_id) {\n      sessionStorage.setItem(\"liff_id\", parsed.liff_id);\n      sessionStorage.setItem(\"fist_path\", window.location.pathname);\n      dispatch({ type: \"AUTH_LIFF_ID\", payload: parsed.liff_id })\n      dispatch({ type: \"AUTH_STATUS\", payload: auth.status })\n      setLoading(false)\n    } else {\n      setLoading(false)\n      dispatch({ type: \"AUTH_LIFF_ID\", payload: parsed.liff_id })\n    }\n  }, [])\n\n\n  return (\n    <div className={classes.app}>\n      {loading ? (\n        <Loading></Loading>\n      ) : (<React.Fragment>\n        <Router>\n          {/* <TransitionGroup>\n            <CSSTransition\n              key={window.location.key}\n              classNames=\"fade\"\n              timeout={300}\n            > */}\n              <Switch>\n                <Route exact path={`/`}>\n                  {sessionStorage.getItem(\"liff_id\") ? (<LiffRedirectUriView></LiffRedirectUriView>) : (<NotFoundLIFFIDView></NotFoundLIFFIDView>)}\n\n                </Route>\n                <Route path={`/setup`}>\n                  {sessionStorage.getItem(\"liff_id\") ? (<SetupView></SetupView>) : (<NotFoundLIFFIDView></NotFoundLIFFIDView>)}\n                </Route>\n\n                <Route path={`/setting`}>\n                  <RunView>\n                    <SettingView></SettingView>\n                  </RunView>\n                </Route>\n                <Route path={`/address`}>\n                  <RunView>\n                    <AddressView></AddressView>\n                  </RunView>\n                </Route>\n                <Route path={`/add_product`}>\n                  <RunView>\n                    <AddProductView></AddProductView>\n                  </RunView>\n                </Route>\n                <Route path={`/products`}>\n                  <RunView>\n                    <ProductView></ProductView>\n                  </RunView>\n                </Route>\n              </Switch>\n            {/* </CSSTransition>\n          </TransitionGroup> */}\n        </Router>\n      </React.Fragment>)}\n    </div>\n  );\n}\n\nexport default App;\n",["141","142"],"/Users/n.devs/Desktop/develop/line-login-react/src/reducers/userReducer.js",[],"/Users/n.devs/Desktop/develop/line-login-react/src/views/NotFoundLIFFIDView/index.js",[],"/Users/n.devs/Desktop/develop/line-login-react/src/reducers/authReducer.js",[],["143","144"],"/Users/n.devs/Desktop/develop/line-login-react/src/views/LiffRedirectUriView/index.js",["145","146"],"import React from 'react';\nimport queryString from \"query-string\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { useHistory } from \"react-router-dom\"\nimport liff from \"@line/liff\";\nimport { fireStore } from \"../../firebase.config\"\n\nfunction LiffRedirectUriView() {\n    const [loading, setLoading] = React.useState(true);\n    const history = useHistory()\n    const auth = useSelector(state => state.auth);\n    const parsed = queryString.parse(window.location.search);\n    const dispatch = useDispatch();\n    console.log(parsed[\"liff.state\"]);\n    console.log(auth);\n    console.log(history);\n\n    console.log(dispatch);\n\n    React.useEffect(() => {\n        const appRef = fireStore.collection(\"line_apps\");\n        if (sessionStorage.getItem(\"liff_id\")) {\n            liff.init({ liffId: `${sessionStorage.getItem(\"liff_id\")}` }).then(async () => {\n\n                if (liff.isLoggedIn()) {\n                    const getProfile = await liff.getProfile();\n                    console.log(getProfile);\n\n                    const userId = await appRef.doc(sessionStorage.getItem(\"liff_id\")).collection(\"users\").doc(getProfile.userId).get();\n\n                    if (!userId.exists) {\n                        console.log(\"No such document!\");\n                        dispatch({ type: \"AUTH_STATUS\", payload: false })\n                        dispatch({ type: \"USER_DISPLAY_NAME\", payload: getProfile.displayName });\n                        dispatch({ type: \"USER_ID\", payload: getProfile.userId });\n                        dispatch({ type: \"USER_PICTURE_URL\", payload: getProfile.pictureUrl });\n                        await appRef.doc(sessionStorage.getItem(\"liff_id\")).collection(\"users\").doc(getProfile.userId).set({ ...getProfile })\n\n                    } else {\n                        console.log(\"Document data:\", userId.data());\n                        console.log(\"getProfile line:\", getProfile);\n                        if (userId.data().numberPhone) {\n                            dispatch({ type: \"AUTH_STATUS\", payload: true })\n                            dispatch({ type: \"USER_DISPLAY_NAME\", payload: userId.data().displayName });\n                            dispatch({ type: \"USER_ID\", payload: userId.data().userId });\n                            dispatch({ type: \"USER_PICTURE_URL\", payload: userId.data().pictureUrl });\n                            dispatch({ type: \"USER_NUMBER_PHONE\", payload: userId.data().numberPhone })\n                            setLoading(false)\n                        } else {\n                            dispatch({ type: \"AUTH_STATUS\", payload: false })\n                            dispatch({ type: \"USER_DISPLAY_NAME\", payload: userId.data().displayName });\n                            dispatch({ type: \"USER_ID\", payload: userId.data().userId });\n                            dispatch({ type: \"USER_PICTURE_URL\", payload: userId.data().pictureUrl });\n                            setLoading(false)\n                        }\n                    }\n                } else {\n                    dispatch({ type: \"AUTH_FIST_PATH\", payload: window.location.pathname })\n\n                    liff.login();\n                    console.log(\"a\");\n                }\n\n            }).catch(err => { throw err });\n        } else {\n            // setLoading(false)\n            console.log(\"b\");\n            dispatch({ type: \"AUTH_LIFF_ID\", payload: parsed.liff_id })\n        }\n    }, [])\n\n    return (<React.Fragment>\n        {/* <Redirect to={`${parsed[\"liff.state\"]}`} /> */}\n    </React.Fragment>)\n}\n\nexport default LiffRedirectUriView","/Users/n.devs/Desktop/develop/line-login-react/src/views/SetupView/index.js",["147"],"import React from 'react';\nimport {\n    makeStyles\n} from '@material-ui/core/styles';\nimport Grid from '@material-ui/core/Grid';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fireStore } from '../../firebase.config';\nimport queryString from \"query-string\";\nimport NumberPhoneInput from '../../components/NumberPhoneInput';\nimport { useHistory } from 'react-router-dom';\nimport liff from \"@line/liff\";\nimport Loading from '../../components/Loading';\nimport { Redirect } from 'react-router-dom'\n\nconst useStyles = makeStyles((theme) => ({\n    avatars: {\n        width: theme.spacing(10),\n        height: theme.spacing(10),\n    },\n    appBar: {\n        top: 'auto',\n        bottom: 0,\n        backgroundColor: 'white',\n        padding: 15,\n    },\n    layout: {\n        padding: \"10px 0px\"\n    },\n    app: {\n        height: 450\n    }\n}));\n\n\nfunction SetupView() {\n    const [loading, setLoading] = React.useState(true);\n    const dispatch = useDispatch();\n    const classes = useStyles();\n    const parsed = queryString.parse(window.location.search);\n    const user = useSelector(state => state.user);\n    const auth = useSelector(state => state.auth);\n    // const [status,setStatus] = React.useState(false)\n    const history = useHistory();\n    const handleChange = (prop) => (event) => {\n        dispatch({ type: \"USER_NUMBER_PHONE\", payload: event.target.value })\n    };\n    const appRef = fireStore.collection(\"line_apps\");\n\n    async function Update() {\n        await appRef.doc(parsed.liff_id).collection(\"users\").doc(user.userId).update({\n            userId: user.userId,\n            displayName: user.displayName,\n            pictureUrl: user.pictureUrl,\n            numberPhone: user.numberPhone\n        }).then(function () {\n            dispatch({ type: \"AUTH_STATUS\", payload: true });\n            history.push(`${parsed.pathname}?liff_id=${parsed.liff_id}`)\n        });\n\n    }\n    React.useEffect(() => {\n        const appRef = fireStore.collection(\"line_apps\");\n        if (sessionStorage.getItem(\"liff_id\")) {\n            liff.init({ liffId: `${sessionStorage.getItem(\"liff_id\")}` }).then(async () => {\n\n                if (liff.isLoggedIn()) {\n                    const getProfile = await liff.getProfile();\n                    console.log(getProfile);\n\n                    const userId = await appRef.doc(sessionStorage.getItem(\"liff_id\")).collection(\"users\").doc(getProfile.userId).get();\n\n                    if (!userId.exists) {\n                        console.log(\"No such document!\");\n                        dispatch({ type: \"AUTH_STATUS\", payload: false })\n                        dispatch({ type: \"USER_DISPLAY_NAME\", payload: getProfile.displayName });\n                        dispatch({ type: \"USER_ID\", payload: getProfile.userId });\n                        dispatch({ type: \"USER_PICTURE_URL\", payload: getProfile.pictureUrl });\n                        await appRef.doc(sessionStorage.getItem(\"liff_id\")).collection(\"users\").doc(getProfile.userId).set({ ...getProfile })\n\n                    } else {\n                       \n                        console.log(\"getProfile line:\", getProfile);\n                        if (userId.data().numberPhone) {\n                            console.log(\"Document data:\", userId.data());\n                            dispatch({ type: \"AUTH_STATUS\", payload: true })\n                            dispatch({ type: \"USER_DISPLAY_NAME\", payload: userId.data().displayName });\n                            dispatch({ type: \"USER_ID\", payload: userId.data().userId });\n                            dispatch({ type: \"USER_PICTURE_URL\", payload: userId.data().pictureUrl });\n                            dispatch({ type: \"USER_NUMBER_PHONE\", payload: userId.data().numberPhone })\n                            setLoading(false)\n                            // setStatus(auth.status)\n                        } else {\n                            dispatch({ type: \"AUTH_STATUS\", payload: false })\n                            dispatch({ type: \"USER_DISPLAY_NAME\", payload: userId.data().displayName });\n                            dispatch({ type: \"USER_ID\", payload: userId.data().userId });\n                            dispatch({ type: \"USER_PICTURE_URL\", payload: userId.data().pictureUrl });\n                            setLoading(false)\n                        }\n                    }\n                } else {\n                    dispatch({ type: \"AUTH_FIST_PATH\", payload: window.location.pathname })\n\n                    liff.login({ redirectUri: `${window.location.href}` });\n                    console.log(\"a\");\n                }\n\n            }).catch(err => { throw err });\n        } else {\n            // setLoading(false)\n            console.log(\"b\");\n            dispatch({ type: \"AUTH_LIFF_ID\", payload: parsed.liff_id })\n        }\n    }, [])\n\n    return (\n        <div>\n            {loading ? (<React.Fragment>\n                <Loading></Loading>\n            </React.Fragment>) : (<React.Fragment>\n                {auth.status ? (<React.Fragment>\n                    <Redirect to={`${parsed.pathname}?liff_id=${parsed.liff_id}`}></Redirect>\n                </React.Fragment>) : (<React.Fragment>\n                    <Grid\n                        container\n                        direction=\"row\"\n                        justify=\"center\"\n                        alignItems=\"center\"\n                        className={classes.app}\n                    >\n                        <Grid item xs={12}>\n                            <Grid\n                                container\n                                direction=\"column\"\n                                justify=\"center\"\n                                alignItems=\"center\"\n                            >\n                                <Grid item xs={12}>\n                                    <Grid\n                                        container\n                                        direction=\"row\"\n                                        justify=\"center\"\n                                        alignItems=\"center\"\n                                        className={classes.layout}\n                                        style={{\n                                            paddingTop: 20\n                                        }}\n                                    >\n                                        <Avatar alt={user.displayName} src={user.pictureUrl} className={classes.avatars} />\n                                    </Grid>\n                                    <Grid\n                                        container\n                                        direction=\"row\"\n                                        justify=\"center\"\n                                        alignItems=\"center\"\n                                        className={classes.layout}\n                                    >\n                                        <Typography variant=\"h6\" component=\"h6\">\n                                            {user.displayName}\n                                        </Typography>\n                                    </Grid>\n                                    <Grid\n                                        container\n                                        direction=\"row\"\n                                        justify=\"center\"\n                                        alignItems=\"center\"\n                                        className={classes.layout}\n                                        style={{\n                                            paddingTop: 20\n                                        }}\n                                    >\n                                        <label htmlFor=\"phone\">{\"ลงทะเบียนหมายเลขโทรศัพท์:\"}</label>\n                                        <NumberPhoneInput type=\"tel\" id=\"phone\" name=\"phone\" pattern=\"[0-9]{3} [0-9]{2} [0-9]{3} [0-9]{4}\" placeholder=\"+66 80 123 1234\" onChange={handleChange()}></NumberPhoneInput>\n                                    </Grid>\n                                </Grid>\n                                <Grid item xs={12}></Grid>\n                            </Grid>\n                        </Grid>\n                    </Grid>\n                    <AppBar position=\"fixed\" color=\"primary\" className={classes.appBar}>\n                        <Button variant=\"contained\" style={{ fontSize: '1em', backgroundColor: \"#00b900\", color: \"#fff\", fontWeight: \"bold\" }} onClick={Update}>\n                            {\"เพิ่มหมายเลขโทรศัพท์\"}\n                        </Button>\n                    </AppBar>\n                </React.Fragment>)}\n\n            </React.Fragment>)}\n\n        </div>\n    )\n};\n\nexport default SetupView;",["148","149"],"/Users/n.devs/Desktop/develop/line-login-react/src/index.js",[],"/Users/n.devs/Desktop/develop/line-login-react/src/reducers/todoReducer.js",[],"/Users/n.devs/Desktop/develop/line-login-react/src/components/Loading/index.js",[],["150","151"],"/Users/n.devs/Desktop/develop/line-login-react/src/views/AddressView/index.js",["152"],"import React from 'react';\nimport {\n    makeStyles\n} from '@material-ui/core/styles';\n// import Grid from '@material-ui/core/Grid';\n// import Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fireStore } from '../../firebase.config';\n// import queryString from \"query-string\";\n// import Snackbar from '@material-ui/core/Snackbar';\n// import Slide from '@material-ui/core/Slide';\n// import MuiAlert from '@material-ui/lab/Alert';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText'\nimport Divider from '@material-ui/core/Divider';\nimport DialogAddAddress from '../../components/DialogAddAddress'\nimport DialogUpdateAddress from '../../components/DialogUpdateAddress'\n\nconst useStyles = makeStyles((theme) => ({\n    avatars: {\n        width: theme.spacing(10),\n        height: theme.spacing(10),\n    },\n    appBar: {\n        top: 'auto',\n        bottom: 0,\n        backgroundColor: 'white',\n        padding: 15,\n    },\n    layout: {\n        padding: \"10px 0px\"\n    },\n    app: {\n        height: 450\n    }\n}));\n\n// function TransitionDown(props) {\n//     return <Slide {...props} direction=\"down\" />;\n// }\n\n// function Alert(props) {\n//     return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n// }\n\nfunction AddressView() {\n    const dispatch = useDispatch();\n    const classes = useStyles();\n    // const parsed = queryString.parse(window.location.search);\n    const user = useSelector(state => state.user);\n    const address = useSelector(state => state.address);\n    const control = useSelector(state => state.control);\n\n    function openDialogAddAddress() {\n        dispatch({ type: \"CONTROL_OPEN_DIALOG_ADD_ADDRESS\", payload: !control.openDialogAddAddress })\n    }\n  \n\n    const openDialogUpdateAddress = (prop, number) => (event) => {\n        console.log(prop,number);\n        dispatch({ type: \"ADDRESS_UPDATE_NUMBER\", payload: number })\n        dispatch({ type: \"ADDRESS_UPDATE_ID\", payload: prop.id })\n        dispatch({ type: \"ADDRESS_UPDATE_NAME\", payload: prop.name })\n        dispatch({ type: \"ADDRESS_UPDATE_NUMBER_PHONE\", payload: prop.numberPhone })\n        dispatch({ type: \"ADDRESS_UPDATE_ADDRESS\", payload: prop.address })\n        dispatch({ type: \"CONTROL_OPEN_DIALOG_UPDATE_ADDRESS\", payload: !control.openDialogUpdateAddress })\n    }\n\n    // function handleClose() {\n    //     dispatch({ type: \"CONTROL_OPEN_SNACKBARK_UPDATE_NUMBER_PHONE_SECCUSS\", payload: !control.openSnackbarUpdateNumberSeccuss })\n    // }\n\n    React.useEffect(() => {\n        const data = [];\n        const appRef = fireStore.collection(\"line_apps\");\n        appRef.doc(sessionStorage.getItem(\"liff_id\")).collection(\"users\").doc(user.userId).collection(\"address\").get().then(snapshot => {\n            snapshot.docs.forEach(hospital => {\n                data.push(hospital.data())\n            });\n            dispatch({ type: \"ADDRESS_STORAGE\", payload: data })\n            dispatch({ type: \"AUTH_FIST_PATH\", payload: sessionStorage.getItem(\"fist_path\") })\n            dispatch({ type: \"AUTH_LIFF_ID\", payload: sessionStorage.getItem(\"liff_id\") })\n        })\n    }, [])\n\n    return (\n        <div style={{ paddingBottom: 70 }}>\n\n            <List\n                component=\"nav\"\n                aria-labelledby=\"nested-list-subheader\"\n                subheader={\n                    <ListSubheader component=\"div\" id=\"nested-list-subheader\" style={{ backgroundColor: \"white\" }}>\n                        {\"ที่อยู่จัดส่ง\"}\n                    </ListSubheader>\n                }\n                className={classes.root}\n            >\n                {address.storage.map((data, key) => (\n                    <React.Fragment key={key}>\n                        <Divider></Divider>\n                        <ListItem button onClick={openDialogUpdateAddress(data, key)}>\n                            <ListItemText\n                                primary={data.name}\n                                secondary={\n                                    <React.Fragment>\n                                        <Typography\n                                            component=\"span\"\n                                            variant=\"body2\"\n                                            className={classes.inline}\n                                            color=\"textPrimary\"\n                                        >\n                                            {data.numberPhone}\n                                        </Typography>\n                                        {\" — \" + data.address}\n                                    </React.Fragment>\n                                }\n                            />\n                        </ListItem>\n                    </React.Fragment>\n                ))}\n\n            </List>\n            <AppBar position=\"fixed\" color=\"primary\" className={classes.appBar}>\n                <Button variant=\"contained\" style={{ fontSize: '1em', backgroundColor: \"#00b900\", color: \"#fff\", fontWeight: \"bold\" }} onClick={openDialogAddAddress}>\n                    {\"เพิ่มที่อยู่จัดส่ง\"}\n                </Button>\n            </AppBar>\n            <DialogAddAddress></DialogAddAddress>\n            <DialogUpdateAddress></DialogUpdateAddress>\n           \n        </div>\n    )\n};\n\nexport default AddressView;","/Users/n.devs/Desktop/develop/line-login-react/src/reducers/controlReducer.js",[],"/Users/n.devs/Desktop/develop/line-login-react/src/components/DialogAddAddress/index.js",[],"/Users/n.devs/Desktop/develop/line-login-react/src/reducers/addressReducer.js",[],"/Users/n.devs/Desktop/develop/line-login-react/src/components/DialogUpdateAddress/index.js",[],"/Users/n.devs/Desktop/develop/line-login-react/src/components/DialogDeleteAddress/index.js",[],"/Users/n.devs/Desktop/develop/line-login-react/src/views/AddProductView/index.js",["153","154"],"import React from 'react';\nimport {\n    makeStyles\n} from '@material-ui/core/styles';\n// import Grid from '@material-ui/core/Grid';\nimport Avatar from '@material-ui/core/Avatar';\nimport Typography from '@material-ui/core/Typography';\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fireStore } from '../../firebase.config';\nimport ListSubheader from '@material-ui/core/ListSubheader';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText'\nimport Divider from '@material-ui/core/Divider';\nimport DialogAddProduct from '../../components/DialogAddProduct'\nimport DialogUpdateProduct from '../../components/DialogUpdateProduct'\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\n\nconst useStyles = makeStyles((theme) => ({\n    avatars: {\n        width: theme.spacing(10),\n        height: theme.spacing(10),\n    },\n    appBar: {\n        top: 'auto',\n        bottom: 0,\n        backgroundColor: 'white',\n        padding: 15,\n    },\n    layout: {\n        padding: \"10px 0px\"\n    },\n    app: {\n        height: 450\n    }\n}));\n\n// function TransitionDown(props) {\n//     return <Slide {...props} direction=\"down\" />;\n// }\n\n// function Alert(props) {\n//     return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n// }\n\nfunction AddProductView() {\n    const dispatch = useDispatch();\n    const classes = useStyles();\n    // const parsed = queryString.parse(window.location.search);\n    const user = useSelector(state => state.user);\n    const product = useSelector(state => state.product);\n    const control = useSelector(state => state.control);\n\n    function openDialogAddProduct() {\n        dispatch({ type: \"CONTROL_OPEN_DIALOG_ADD_PRODUCT\", payload: !control.openDialogAddProduct })\n    }\n    const appRef = fireStore.collection(\"line_apps\");\n\n    const openDialogUpdateProduct = (prop, number) => (event) => {\n        console.log(prop, number);\n        dispatch({ type: \"PRODUCT_UPDATE_NUMBER\", payload: number })\n        dispatch({ type: \"PRODUCT_UPDATE_ID\", payload: prop.id })\n        dispatch({ type: \"PRODUCT_UPDATE_NAME\", payload: prop.name })\n        dispatch({ type: \"PRODUCT_UPDATE_PRUDUCT_ID\", payload: prop.productId })\n        dispatch({ type: \"PRODUCT_UPDATE_PRICE\", payload: prop.price })\n        dispatch({ type: \"PRODUCT_UPDATE_IMAGE\", payload: prop.image })\n        dispatch({ type: \"CONTROL_OPEN_DIALOG_UPDATE_PRODUCT\", payload: !control.openDialogUpdateProduct })\n    }\n\n    React.useEffect(() => {\n        const data = [];\n        appRef.doc(sessionStorage.getItem(\"liff_id\")).collection(\"products\").get().then(snapshot => {\n            snapshot.docs.forEach(hospital => {\n                data.push(hospital.data())\n            });\n            dispatch({ type: \"PRODUCT_STORAGE\", payload: data })\n            dispatch({ type: \"AUTH_FIST_PATH\", payload: sessionStorage.getItem(\"fist_path\") })\n            dispatch({ type: \"AUTH_LIFF_ID\", payload: sessionStorage.getItem(\"liff_id\") })\n        })\n    }, [])\n\n    return (\n        <div style={{ paddingBottom: 70 }}>\n\n            <List\n                component=\"nav\"\n                aria-labelledby=\"nested-list-subheader\"\n                subheader={\n                    <ListSubheader component=\"div\" id=\"nested-list-subheader\" style={{ backgroundColor: \"white\" }}>\n                        {\"สินค้า\"}\n                    </ListSubheader>\n                }\n                className={classes.root}\n            >\n                {product.storage.map((data, key) => (\n                    <React.Fragment key={key}>\n\n                        <ListItem alignItems=\"flex-start\">\n                            <Divider></Divider>\n                            <ListItemAvatar>\n                                <Avatar variant=\"rounded\" alt=\"Remy Sharp\" src={data.image} style={{\n                                    width: 65,\n                                    height: 65\n                                }} />\n                            </ListItemAvatar>\n                            <ListItem button onClick={openDialogUpdateProduct(data, key)}>\n                                <ListItemText\n                                    primary={data.productId}\n                                    secondary={\n                                        <React.Fragment>\n                                            <Typography\n                                                component=\"span\"\n                                                variant=\"body2\"\n                                                className={classes.inline}\n                                                color=\"textPrimary\"\n                                            >\n                                                {data.name}\n                                            </Typography>\n                                            {\" — \" + data.price}\n                                        </React.Fragment>\n                                    }\n                                />\n                            </ListItem>\n                        </ListItem>\n                        <Divider variant=\"inset\" component=\"li\" />\n                    </React.Fragment>\n                ))}\n\n            </List>\n            <AppBar position=\"fixed\" color=\"primary\" className={classes.appBar}>\n                <Button variant=\"contained\" style={{ fontSize: '1em', backgroundColor: \"#00b900\", color: \"#fff\", fontWeight: \"bold\" }} onClick={openDialogAddProduct}>\n                    {\"เพิ่มสินค้า\"}\n                </Button>\n            </AppBar>\n            <DialogAddProduct></DialogAddProduct>\n            <DialogUpdateProduct></DialogUpdateProduct>\n        </div>\n    )\n};\n\nexport default AddProductView;","/Users/n.devs/Desktop/develop/line-login-react/src/reducers/productReducer.js",[],"/Users/n.devs/Desktop/develop/line-login-react/src/components/DialogAddProduct/index.js",["155"],"/Users/n.devs/Desktop/develop/line-login-react/src/components/DialogUpdateProduct/index.js",["156"],"/Users/n.devs/Desktop/develop/line-login-react/src/components/DialogDeleteProduct/index.js",["157"],"/Users/n.devs/Desktop/develop/line-login-react/src/views/ProductView/index.js",["158","159","160"],"import React from 'react';\nimport {\n    makeStyles\n} from '@material-ui/core/styles';\nimport Typography from '@material-ui/core/Typography';\nimport AppBar from '@material-ui/core/AppBar';\nimport Button from '@material-ui/core/Button';\nimport { useSelector, useDispatch } from \"react-redux\";\nimport { fireStore } from '../../firebase.config';\nimport ListSubheader from '@material-ui/core/ListSubheader';\n// import DialogAddProduct from '../../components/DialogAddProduct'\n// import DialogUpdateProduct from '../../components/DialogUpdateProduct'\nimport GridList from '@material-ui/core/GridList';\nimport GridListTile from '@material-ui/core/GridListTile';\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\n// import ListItem from '@material-ui/core/ListItem';\n// import { ButtonBase } from '@material-ui/core';\nimport Badge from '@material-ui/core/Badge';\nimport { withStyles } from '@material-ui/core/styles';\nimport IconButton from '@material-ui/core/IconButton';\nimport ShoppingCartIcon from '@material-ui/icons/ShoppingCart';\nimport DialogListOrder from '../../components/DialogListOrder'\nimport DialogSelectAddress from '../../components/DialogSelectAddress'\nimport DialogBuyProduct from '../../components/DialogBuyProduct'\n\nconst StyledBadge = withStyles((theme) => ({\n    badge: {\n        right: -3,\n        top: 13,\n        border: `2px solid ${theme.palette.background.paper}`,\n        padding: '0 4px',\n    },\n}))(Badge);\n\n\nconst useStyles = makeStyles((theme) => ({\n    avatars: {\n        width: theme.spacing(10),\n        height: theme.spacing(10),\n    },\n    appBar: {\n        top: 'auto',\n        bottom: 0,\n        backgroundColor: 'white',\n        padding: 15,\n    },\n    layout: {\n        padding: \"10px 0px\"\n    },\n    app: {\n        height: 450\n    },\n    gridList: {\n        width: '100%',\n        height: '100%',\n    },\n    icon: {\n        color: 'rgba(255, 255, 255, 0.54)',\n    },\n}));\n\n// function TransitionDown(props) {\n//     return <Slide {...props} direction=\"down\" />;\n// }\n\n// function Alert(props) {\n//     return <MuiAlert elevation={6} variant=\"filled\" {...props} />;\n// }\n\nfunction ProductView() {\n    const dispatch = useDispatch();\n    const classes = useStyles();\n    const [onLength, setLength] = React.useState(0)\n    // const parsed = queryString.parse(window.location.search);\n    const user = useSelector(state => state.user);\n    const product = useSelector(state => state.product);\n    const control = useSelector(state => state.control);\n    const order = useSelector(state => state.order);\n\n    function openDialogSelectAddress() {\n        dispatch({ type: \"CONTROL_OPEN_DIALOG_SELECT_ADDRESS\", payload: !control.openDialogSelectAddress })\n    }\n    const appRef = fireStore.collection(\"line_apps\");\n\n    // const openDialogUpdateProduct = (prop, number) => (event) => {\n    //     console.log(prop, number);\n    //     dispatch({ type: \"PRODUCT_UPDATE_NUMBER\", payload: number })\n    //     dispatch({ type: \"PRODUCT_UPDATE_ID\", payload: prop.id })\n    //     dispatch({ type: \"PRODUCT_UPDATE_NAME\", payload: prop.name })\n    //     dispatch({ type: \"PRODUCT_UPDATE_PRUDUCT_ID\", payload: prop.productId })\n    //     dispatch({ type: \"PRODUCT_UPDATE_PRICE\", payload: prop.price })\n    //     dispatch({ type: \"PRODUCT_UPDATE_IMAGE\", payload: prop.image })\n    //     dispatch({ type: \"CONTROL_OPEN_DIALOG_UPDATE_PRODUCT\", payload: !control.openDialogUpdateProduct })\n    // }\n\n    const getOrder = (prop, key) => (event) => {\n        order.storage.push(prop)\n        dispatch({ type: \"ORDER_STORAGE\", payload: order.storage })\n        dispatch({ type: \"ORDER_LENGTH\", payload: order.storage.length })\n        setLength(order.storage.length)\n    }\n\n    const openDialogListOrder = () => {\n        dispatch({ type: \"CONTROL_OPEN_DIALOG_LIST_ORDER\", payload: !control.openDialogListOrder })\n    };\n\n\n    React.useEffect(() => {\n        const data = [];\n        appRef.doc(sessionStorage.getItem(\"liff_id\")).collection(\"products\").get().then(snapshot => {\n            snapshot.docs.forEach(hospital => {\n                data.push(hospital.data())\n            });\n            dispatch({ type: \"PRODUCT_STORAGE\", payload: data })\n            dispatch({ type: \"AUTH_FIST_PATH\", payload: sessionStorage.getItem(\"fist_path\") })\n            dispatch({ type: \"AUTH_LIFF_ID\", payload: sessionStorage.getItem(\"liff_id\") })\n        })\n        setLength(order.storage.length)\n    }, [order.storage])\n\n    return (\n        <div style={{ paddingBottom: 70 }}>\n\n            <GridList className={classes.gridList}>\n                <GridListTile key=\"Subheader\" cols={2} style={{ height: 'auto' }}>\n                    <ListSubheader component=\"div\">{\"สินค้า\"} <IconButton style={{ float: 'right' }} aria-label=\"cart\" onClick={openDialogListOrder}>\n                        <StyledBadge badgeContent={order.length} color=\"secondary\" >\n                            <ShoppingCartIcon />\n                        </StyledBadge>\n                    </IconButton></ListSubheader>\n\n                </GridListTile>\n                {product.storage.map((data, key) => (\n\n                    <GridListTile key={key} component=\"a\" onClick={getOrder(data, key)}>\n                        {/* <div style={{\n                            textAlign: 'end',\n                            color: '#35b900',\n                        }}>\n                            <Typography variant=\"h6\">{0}</Typography>\n                        </div> */}\n\n                        <img src={data.image} alt={data.name} />\n\n                        <GridListTileBar\n                            title={data.name}\n                            subtitle={<span>id: {data.productId}</span>}\n                            actionIcon={\n                                <Typography variant=\"h6\" style={{ color: 'white' }}>{`${data.price} `}<span style={{ fontSize: 15 }}>บาท</span></Typography>\n                            }\n                        />\n                    </GridListTile>\n\n                ))}\n\n            </GridList>\n            <AppBar position=\"fixed\" color=\"primary\" className={classes.appBar}>\n                <Button variant=\"contained\" style={{ fontSize: '1em', backgroundColor: \"#00b900\", color: \"#fff\", fontWeight: \"bold\" }} onClick={openDialogSelectAddress}>\n                    {\"ซื้อ\"}\n                </Button>\n            </AppBar>\n            <DialogListOrder></DialogListOrder>\n            <DialogSelectAddress></DialogSelectAddress>\n            <DialogBuyProduct></DialogBuyProduct>\n        </div >\n    )\n};\n\nexport default ProductView;","/Users/n.devs/Desktop/develop/line-login-react/src/reducers/orderReducer.js",[],"/Users/n.devs/Desktop/develop/line-login-react/src/components/DialogListOrder/index.js",[],"/Users/n.devs/Desktop/develop/line-login-react/src/components/DialogSelectAddress/index.js",["161"],"import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Dialog from '@material-ui/core/Dialog';\nimport Button from '@material-ui/core/Button';\nimport List from '@material-ui/core/List';\n// import Grid from '@material-ui/core/Grid';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport IconButton from '@material-ui/core/IconButton';\nimport Typography from '@material-ui/core/Typography';\nimport CloseIcon from '@material-ui/icons/Close';\nimport Slide from '@material-ui/core/Slide';\nimport { useSelector, useDispatch } from \"react-redux\";\n// import NumberPhoneInput from '../NumberPhoneInput';\n// import Snackbar from '@material-ui/core/Snackbar';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText'\nimport Divider from '@material-ui/core/Divider';\n// import InputBase from '@material-ui/core/InputBase';\nimport { fireStore } from '../../firebase.config'\n// import queryString from \"query-string\";\nimport ListSubheader from '@material-ui/core/ListSubheader';\n// import DialogBuyProduct from '../DialogBuyProduct'\n\nconst useStyles = makeStyles((theme) => ({\n    appBar: {\n        position: 'relative',\n        backgroundColor: \"#7d8690\",\n    },\n    appBarBottom: {\n        top: 'auto',\n        bottom: 0,\n        backgroundColor: 'white',\n        padding: 15,\n    },\n    title: {\n        // marginLeft: theme.spacing(2),\n        flex: 1,\n    },\n}));\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n    return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function DialogSelectAddress() {\n    const classes = useStyles();\n    const dispatch = useDispatch();\n    const control = useSelector(state => state.control);\n    const address = useSelector(state => state.address);\n    const user = useSelector(state => state.user);\n    const [selectedIndex, setSelectedIndex] = React.useState(1);\n    const appRef = fireStore.collection(\"line_apps\");\n\n    const handleClose = () => {\n        dispatch({ type: \"CONTROL_OPEN_DIALOG_SELECT_ADDRESS\", payload: !control.openDialogSelectAddress })\n    };\n\n\n    async function Next() {\n        dispatch({ type: \"CONTROL_OPEN_DIALOG_SUM_ORDER\", payload: true })\n        dispatch({ type: \"CONTROL_OPEN_DIALOG_SELECT_ADDRESS\", payload: false })\n    }\n\n    const handleListItemClick = (event, index, data) => {\n        setSelectedIndex(index);\n        dispatch({ type: \"ORDER_ADDRESS\", payload: data })\n        console.log(index, data);\n    };\n\n    React.useEffect(() => {\n        const data = [];\n        appRef.doc(sessionStorage.getItem(\"liff_id\")).collection(\"users\").doc(user.userId).collection(\"address\").get().then(snapshot => {\n            snapshot.docs.forEach(hospital => {\n                data.push(hospital.data())\n            });\n            dispatch({ type: \"ADDRESS_STORAGE\", payload: data })\n            dispatch({ type: \"AUTH_FIST_PATH\", payload: sessionStorage.getItem(\"fist_path\") })\n            dispatch({ type: \"AUTH_LIFF_ID\", payload: sessionStorage.getItem(\"liff_id\") })\n        })\n    }, [])\n\n    return (\n\n        <Dialog fullScreen open={control.openDialogSelectAddress} onClose={handleClose} TransitionComponent={Transition}>\n            <AppBar className={classes.appBar}>\n                <Toolbar>\n\n                    <Typography variant=\"h6\" className={classes.title}>\n                        {\"เลือกที่อยู่จัดส่ง\"}\n                    </Typography>\n                    <IconButton edge=\"start\" color=\"inherit\" onClick={handleClose} aria-label=\"close\">\n                        <CloseIcon />\n                    </IconButton>\n                </Toolbar>\n            </AppBar>\n\n            <List\n                component=\"nav\"\n                aria-labelledby=\"nested-list-subheader\"\n                subheader={\n                    <ListSubheader component=\"div\" id=\"nested-list-subheader\" style={{ backgroundColor: \"white\" }}>\n                        {\"ที่อยู่จัดส่ง\"}\n                    </ListSubheader>\n                }\n                className={classes.root}\n            >\n                {address.storage.map((data, key) => (\n                    <React.Fragment key={key}>\n                        <Divider></Divider>\n                        <ListItem selected={selectedIndex === key} button onClick={(event) => handleListItemClick(event, key, data)}>\n                            <ListItemText\n                                primary={data.name}\n                                secondary={\n                                    <React.Fragment>\n                                        <Typography\n                                            component=\"span\"\n                                            variant=\"body2\"\n                                            className={classes.inline}\n                                            color=\"textPrimary\"\n                                        >\n                                            {data.numberPhone}\n                                        </Typography>\n                                        {\" — \" + data.address}\n                                    </React.Fragment>\n                                }\n                            />\n                        </ListItem>\n                    </React.Fragment>\n                ))}\n\n            </List>\n\n            <AppBar position=\"fixed\" color=\"primary\" className={classes.appBarBottom}>\n                <Button variant=\"contained\" style={{ fontSize: '1em', backgroundColor: \"#00b900\", color: \"#fff\", fontWeight: \"bold\" }} onClick={Next}>\n                    {\"เลือกที่จัดส่ง\"}\n                </Button>\n            </AppBar>\n       \n        </Dialog>\n    );\n}\n","/Users/n.devs/Desktop/develop/line-login-react/src/components/DialogBuyProduct/index.js",[],"/Users/n.devs/Desktop/develop/line-login-react/src/firebase.config.js",[],"/Users/n.devs/Desktop/develop/line-login-react/src/components/NumberPhoneInput/index.js",[],{"ruleId":"162","replacedBy":"163"},{"ruleId":"164","replacedBy":"165"},{"ruleId":"166","severity":1,"message":"167","line":85,"column":8,"nodeType":"168","endLine":85,"endColumn":34,"suggestions":"169"},{"ruleId":"170","severity":1,"message":"171","line":167,"column":40,"nodeType":"172","messageId":"173","endLine":167,"endColumn":41},{"ruleId":"174","severity":1,"message":"175","line":10,"column":3,"nodeType":"176","messageId":"177","endLine":10,"endColumn":18},{"ruleId":"174","severity":1,"message":"178","line":11,"column":3,"nodeType":"176","messageId":"177","endLine":11,"endColumn":16},{"ruleId":"166","severity":1,"message":"179","line":88,"column":6,"nodeType":"168","endLine":88,"endColumn":8,"suggestions":"180"},{"ruleId":"162","replacedBy":"181"},{"ruleId":"164","replacedBy":"182"},{"ruleId":"162","replacedBy":"183"},{"ruleId":"164","replacedBy":"184"},{"ruleId":"174","severity":1,"message":"185","line":9,"column":12,"nodeType":"176","messageId":"177","endLine":9,"endColumn":19},{"ruleId":"166","severity":1,"message":"186","line":70,"column":8,"nodeType":"168","endLine":70,"endColumn":10,"suggestions":"187"},{"ruleId":"166","severity":1,"message":"186","line":117,"column":8,"nodeType":"168","endLine":117,"endColumn":10,"suggestions":"188"},{"ruleId":"162","replacedBy":"189"},{"ruleId":"164","replacedBy":"190"},{"ruleId":"162","replacedBy":"191"},{"ruleId":"164","replacedBy":"192"},{"ruleId":"166","severity":1,"message":"193","line":89,"column":8,"nodeType":"168","endLine":89,"endColumn":10,"suggestions":"194"},{"ruleId":"174","severity":1,"message":"195","line":52,"column":11,"nodeType":"176","messageId":"177","endLine":52,"endColumn":15},{"ruleId":"166","severity":1,"message":"196","line":82,"column":8,"nodeType":"168","endLine":82,"endColumn":10,"suggestions":"197"},{"ruleId":"174","severity":1,"message":"195","line":54,"column":11,"nodeType":"176","messageId":"177","endLine":54,"endColumn":15},{"ruleId":"174","severity":1,"message":"195","line":54,"column":11,"nodeType":"176","messageId":"177","endLine":54,"endColumn":15},{"ruleId":"174","severity":1,"message":"195","line":19,"column":11,"nodeType":"176","messageId":"177","endLine":19,"endColumn":15},{"ruleId":"174","severity":1,"message":"198","line":73,"column":12,"nodeType":"176","messageId":"177","endLine":73,"endColumn":20},{"ruleId":"174","severity":1,"message":"195","line":75,"column":11,"nodeType":"176","messageId":"177","endLine":75,"endColumn":15},{"ruleId":"166","severity":1,"message":"196","line":119,"column":8,"nodeType":"168","endLine":119,"endColumn":23,"suggestions":"199"},{"ruleId":"166","severity":1,"message":"200","line":81,"column":8,"nodeType":"168","endLine":81,"endColumn":10,"suggestions":"201"},"no-native-reassign",["202"],"no-negated-in-lhs",["203"],"react-hooks/exhaustive-deps","React Hook React.useEffect has missing dependencies: 'dispatch' and 'parsed.liff_id'. Either include them or remove the dependency array. Outer scope values like 'window.location.pathname' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["204"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","no-unused-vars","'TransitionGroup' is defined but never used.","Identifier","unusedVar","'CSSTransition' is defined but never used.","React Hook React.useEffect has missing dependencies: 'auth.status', 'dispatch', and 'parsed.liff_id'. Either include them or remove the dependency array.",["205"],["202"],["203"],["202"],["203"],"'loading' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'dispatch' and 'parsed.liff_id'. Either include them or remove the dependency array.",["206"],["207"],["202"],["203"],["202"],["203"],"React Hook React.useEffect has missing dependencies: 'dispatch' and 'user.userId'. Either include them or remove the dependency array.",["208"],"'user' is assigned a value but never used.","React Hook React.useEffect has missing dependencies: 'appRef' and 'dispatch'. Either include them or remove the dependency array.",["209"],"'onLength' is assigned a value but never used.",["210"],"React Hook React.useEffect has missing dependencies: 'appRef', 'dispatch', and 'user.userId'. Either include them or remove the dependency array.",["211"],"no-global-assign","no-unsafe-negation",{"desc":"212","fix":"213"},{"desc":"214","fix":"215"},{"desc":"212","fix":"216"},{"desc":"212","fix":"217"},{"desc":"218","fix":"219"},{"desc":"220","fix":"221"},{"desc":"222","fix":"223"},{"desc":"224","fix":"225"},"Update the dependencies array to be: [dispatch, parsed.liff_id]",{"range":"226","text":"227"},"Update the dependencies array to be: [auth.status, dispatch, parsed.liff_id]",{"range":"228","text":"229"},{"range":"230","text":"227"},{"range":"231","text":"227"},"Update the dependencies array to be: [dispatch, user.userId]",{"range":"232","text":"233"},"Update the dependencies array to be: [appRef, dispatch]",{"range":"234","text":"235"},"Update the dependencies array to be: [appRef, dispatch, order.storage]",{"range":"236","text":"237"},"Update the dependencies array to be: [appRef, dispatch, user.userId]",{"range":"238","text":"239"},[2832,2858],"[dispatch, parsed.liff_id]",[2476,2478],"[auth.status, dispatch, parsed.liff_id]",[3426,3428],[5012,5014],[3431,3433],"[dispatch, user.userId]",[3144,3146],"[appRef, dispatch]",[4430,4445],"[appRef, dispatch, order.storage]",[3124,3126],"[appRef, dispatch, user.userId]"]